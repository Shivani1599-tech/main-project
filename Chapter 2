{"cells":[{"cell_type":"code","metadata":{"id":"H0mjQ2PcrSe5","outputId":"e3f66916-e678-471f-8234-cd32020a70c8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724914327950,"user_tz":-330,"elapsed":120111,"user":{"displayName":"","userId":""}}},"source":["! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local\n","! conda install -c rdkit rdkit -y\n","import sys\n","sys.path.append('/usr/local/lib/python3.7/site-packages/')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-08-29 06:49:31--  https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","Resolving repo.anaconda.com (repo.anaconda.com)... 104.16.191.158, 104.16.32.241, 2606:4700::6810:20f1, ...\n","Connecting to repo.anaconda.com (repo.anaconda.com)|104.16.191.158|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 85055499 (81M) [application/x-sh]\n","Saving to: ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh’\n","\n","Miniconda3-py37_4.8 100%[===================>]  81.12M   196MB/s    in 0.4s    \n","\n","2024-08-29 06:49:32 (196 MB/s) - ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh’ saved [85055499/85055499]\n","\n","PREFIX=/usr/local\n","Unpacking payload ...\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\bdone\n","Solving environment: / \b\b- \b\bdone\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - _libgcc_mutex==0.1=main\n","    - asn1crypto==1.3.0=py37_0\n","    - ca-certificates==2020.1.1=0\n","    - certifi==2019.11.28=py37_0\n","    - cffi==1.14.0=py37h2e261b9_0\n","    - chardet==3.0.4=py37_1003\n","    - conda-package-handling==1.6.0=py37h7b6447c_0\n","    - conda==4.8.2=py37_0\n","    - cryptography==2.8=py37h1ba5d50_0\n","    - idna==2.8=py37_0\n","    - ld_impl_linux-64==2.33.1=h53a641e_7\n","    - libedit==3.1.20181209=hc058e9b_0\n","    - libffi==3.2.1=hd88cf55_4\n","    - libgcc-ng==9.1.0=hdf63c60_0\n","    - libstdcxx-ng==9.1.0=hdf63c60_0\n","    - ncurses==6.2=he6710b0_0\n","    - openssl==1.1.1d=h7b6447c_4\n","    - pip==20.0.2=py37_1\n","    - pycosat==0.6.3=py37h7b6447c_0\n","    - pycparser==2.19=py37_0\n","    - pyopenssl==19.1.0=py37_0\n","    - pysocks==1.7.1=py37_0\n","    - python==3.7.6=h0371630_2\n","    - readline==7.0=h7b6447c_5\n","    - requests==2.22.0=py37_1\n","    - ruamel_yaml==0.15.87=py37h7b6447c_0\n","    - setuptools==45.2.0=py37_0\n","    - six==1.14.0=py37_0\n","    - sqlite==3.31.1=h7b6447c_0\n","    - tk==8.6.8=hbc83047_0\n","    - tqdm==4.42.1=py_0\n","    - urllib3==1.25.8=py37_0\n","    - wheel==0.34.2=py37_0\n","    - xz==5.2.4=h14c3975_4\n","    - yaml==0.1.7=had09818_2\n","    - zlib==1.2.11=h7b6447c_3\n","\n","\n","The following NEW packages will be INSTALLED:\n","\n","  _libgcc_mutex      pkgs/main/linux-64::_libgcc_mutex-0.1-main\n","  asn1crypto         pkgs/main/linux-64::asn1crypto-1.3.0-py37_0\n","  ca-certificates    pkgs/main/linux-64::ca-certificates-2020.1.1-0\n","  certifi            pkgs/main/linux-64::certifi-2019.11.28-py37_0\n","  cffi               pkgs/main/linux-64::cffi-1.14.0-py37h2e261b9_0\n","  chardet            pkgs/main/linux-64::chardet-3.0.4-py37_1003\n","  conda              pkgs/main/linux-64::conda-4.8.2-py37_0\n","  conda-package-han~ pkgs/main/linux-64::conda-package-handling-1.6.0-py37h7b6447c_0\n","  cryptography       pkgs/main/linux-64::cryptography-2.8-py37h1ba5d50_0\n","  idna               pkgs/main/linux-64::idna-2.8-py37_0\n","  ld_impl_linux-64   pkgs/main/linux-64::ld_impl_linux-64-2.33.1-h53a641e_7\n","  libedit            pkgs/main/linux-64::libedit-3.1.20181209-hc058e9b_0\n","  libffi             pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4\n","  libgcc-ng          pkgs/main/linux-64::libgcc-ng-9.1.0-hdf63c60_0\n","  libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-9.1.0-hdf63c60_0\n","  ncurses            pkgs/main/linux-64::ncurses-6.2-he6710b0_0\n","  openssl            pkgs/main/linux-64::openssl-1.1.1d-h7b6447c_4\n","  pip                pkgs/main/linux-64::pip-20.0.2-py37_1\n","  pycosat            pkgs/main/linux-64::pycosat-0.6.3-py37h7b6447c_0\n","  pycparser          pkgs/main/linux-64::pycparser-2.19-py37_0\n","  pyopenssl          pkgs/main/linux-64::pyopenssl-19.1.0-py37_0\n","  pysocks            pkgs/main/linux-64::pysocks-1.7.1-py37_0\n","  python             pkgs/main/linux-64::python-3.7.6-h0371630_2\n","  readline           pkgs/main/linux-64::readline-7.0-h7b6447c_5\n","  requests           pkgs/main/linux-64::requests-2.22.0-py37_1\n","  ruamel_yaml        pkgs/main/linux-64::ruamel_yaml-0.15.87-py37h7b6447c_0\n","  setuptools         pkgs/main/linux-64::setuptools-45.2.0-py37_0\n","  six                pkgs/main/linux-64::six-1.14.0-py37_0\n","  sqlite             pkgs/main/linux-64::sqlite-3.31.1-h7b6447c_0\n","  tk                 pkgs/main/linux-64::tk-8.6.8-hbc83047_0\n","  tqdm               pkgs/main/noarch::tqdm-4.42.1-py_0\n","  urllib3            pkgs/main/linux-64::urllib3-1.25.8-py37_0\n","  wheel              pkgs/main/linux-64::wheel-0.34.2-py37_0\n","  xz                 pkgs/main/linux-64::xz-5.2.4-h14c3975_4\n","  yaml               pkgs/main/linux-64::yaml-0.1.7-had09818_2\n","  zlib               pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3\n","\n","\n","Preparing transaction: | \b\b/ \b\b- \b\b\\ \b\bdone\n","Executing transaction: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","installation finished.\n","WARNING:\n","    You currently have a PYTHONPATH environment variable set. This may cause\n","    unexpected behavior when running the Python interpreter in Miniconda3.\n","    For best results, please verify that your PYTHONPATH only points to\n","    directories of packages that are compatible with the Python interpreter\n","    in Miniconda3: /usr/local\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n","Solving environment: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bfailed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: | \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bfailed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n","Solving environment: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - rdkit\n","\n","\n","The following packages will be downloaded:\n","\n","    package                    |            build\n","    ---------------------------|-----------------\n","    blas-1.0                   |              mkl           6 KB\n","    bottleneck-1.3.4           |   py37hce1f21e_0         126 KB\n","    bzip2-1.0.8                |       h7b6447c_0          78 KB\n","    ca-certificates-2024.7.2   |       h06a4308_0         127 KB\n","    cairo-1.14.12              |       h8948797_3         906 KB\n","    certifi-2022.12.7          |   py37h06a4308_0         150 KB\n","    conda-23.1.0               |   py37h06a4308_0         937 KB\n","    flit-core-3.6.0            |     pyhd3eb1b0_0          42 KB\n","    fontconfig-2.13.0          |       h9420a91_0         227 KB\n","    freetype-2.11.0            |       h70c0345_0         618 KB\n","    glib-2.63.1                |       h5a9c865_0         2.9 MB\n","    icu-58.2                   |       he6710b0_3        10.5 MB\n","    importlib-metadata-4.11.3  |   py37h06a4308_0          40 KB\n","    importlib_metadata-4.11.3  |       hd3eb1b0_0          12 KB\n","    intel-openmp-2021.4.0      |    h06a4308_3561         4.2 MB\n","    jpeg-9e                    |       h7f8727e_0         240 KB\n","    lcms2-2.12                 |       h3be6417_0         312 KB\n","    libboost-1.67.0            |       h46d08c1_4        13.0 MB\n","    libpng-1.6.37              |       hbc83047_0         278 KB\n","    libtiff-4.1.0              |       h2733197_0         447 KB\n","    libuuid-1.0.3              |       h7f8727e_2          17 KB\n","    libxcb-1.15                |       h7f8727e_0         505 KB\n","    libxml2-2.9.9              |       hea5a465_1         1.6 MB\n","    mkl-2021.4.0               |     h06a4308_640       142.6 MB\n","    mkl-service-2.4.0          |   py37h7f8727e_0          56 KB\n","    mkl_fft-1.3.1              |   py37hd3c417c_0         172 KB\n","    mkl_random-1.2.2           |   py37h51133e4_0         287 KB\n","    numexpr-2.8.1              |   py37h6abb31d_0         123 KB\n","    numpy-1.21.5               |   py37he7a7128_2          10 KB\n","    numpy-base-1.21.5          |   py37hf524024_2         4.8 MB\n","    olefile-0.46               |           py37_0          50 KB\n","    openssl-1.1.1w             |       h7f8727e_0         3.7 MB\n","    packaging-22.0             |   py37h06a4308_0          68 KB\n","    pandas-1.3.5               |   py37h8c16a72_0         9.3 MB\n","    pcre-8.45                  |       h295c915_0         207 KB\n","    pillow-8.2.0               |   py37he98fc37_0         622 KB\n","    pixman-0.40.0              |       h7f8727e_1         373 KB\n","    pluggy-1.0.0               |   py37h06a4308_1          29 KB\n","    py-boost-1.67.0            |   py37h04863e7_4         278 KB\n","    python-dateutil-2.8.2      |     pyhd3eb1b0_0         233 KB\n","    pytz-2022.7                |   py37h06a4308_0         207 KB\n","    rdkit-2020.03.3.0          |   py37hc20afe1_1        24.8 MB  rdkit\n","    ruamel.yaml-0.16.12        |   py37h7b6447c_1         173 KB\n","    ruamel.yaml.clib-0.2.6     |   py37h7f8727e_0         133 KB\n","    toolz-0.12.0               |   py37h06a4308_0         104 KB\n","    typing_extensions-4.4.0    |   py37h06a4308_0          45 KB\n","    zipp-3.11.0                |   py37h06a4308_0          19 KB\n","    zstd-1.3.7                 |       h0b5b093_0         401 KB\n","    ------------------------------------------------------------\n","                                           Total:       225.7 MB\n","\n","The following NEW packages will be INSTALLED:\n","\n","  blas               pkgs/main/linux-64::blas-1.0-mkl\n","  bottleneck         pkgs/main/linux-64::bottleneck-1.3.4-py37hce1f21e_0\n","  bzip2              pkgs/main/linux-64::bzip2-1.0.8-h7b6447c_0\n","  cairo              pkgs/main/linux-64::cairo-1.14.12-h8948797_3\n","  flit-core          pkgs/main/noarch::flit-core-3.6.0-pyhd3eb1b0_0\n","  fontconfig         pkgs/main/linux-64::fontconfig-2.13.0-h9420a91_0\n","  freetype           pkgs/main/linux-64::freetype-2.11.0-h70c0345_0\n","  glib               pkgs/main/linux-64::glib-2.63.1-h5a9c865_0\n","  icu                pkgs/main/linux-64::icu-58.2-he6710b0_3\n","  importlib-metadata pkgs/main/linux-64::importlib-metadata-4.11.3-py37h06a4308_0\n","  importlib_metadata pkgs/main/noarch::importlib_metadata-4.11.3-hd3eb1b0_0\n","  intel-openmp       pkgs/main/linux-64::intel-openmp-2021.4.0-h06a4308_3561\n","  jpeg               pkgs/main/linux-64::jpeg-9e-h7f8727e_0\n","  lcms2              pkgs/main/linux-64::lcms2-2.12-h3be6417_0\n","  libboost           pkgs/main/linux-64::libboost-1.67.0-h46d08c1_4\n","  libpng             pkgs/main/linux-64::libpng-1.6.37-hbc83047_0\n","  libtiff            pkgs/main/linux-64::libtiff-4.1.0-h2733197_0\n","  libuuid            pkgs/main/linux-64::libuuid-1.0.3-h7f8727e_2\n","  libxcb             pkgs/main/linux-64::libxcb-1.15-h7f8727e_0\n","  libxml2            pkgs/main/linux-64::libxml2-2.9.9-hea5a465_1\n","  mkl                pkgs/main/linux-64::mkl-2021.4.0-h06a4308_640\n","  mkl-service        pkgs/main/linux-64::mkl-service-2.4.0-py37h7f8727e_0\n","  mkl_fft            pkgs/main/linux-64::mkl_fft-1.3.1-py37hd3c417c_0\n","  mkl_random         pkgs/main/linux-64::mkl_random-1.2.2-py37h51133e4_0\n","  numexpr            pkgs/main/linux-64::numexpr-2.8.1-py37h6abb31d_0\n","  numpy              pkgs/main/linux-64::numpy-1.21.5-py37he7a7128_2\n","  numpy-base         pkgs/main/linux-64::numpy-base-1.21.5-py37hf524024_2\n","  olefile            pkgs/main/linux-64::olefile-0.46-py37_0\n","  packaging          pkgs/main/linux-64::packaging-22.0-py37h06a4308_0\n","  pandas             pkgs/main/linux-64::pandas-1.3.5-py37h8c16a72_0\n","  pcre               pkgs/main/linux-64::pcre-8.45-h295c915_0\n","  pillow             pkgs/main/linux-64::pillow-8.2.0-py37he98fc37_0\n","  pixman             pkgs/main/linux-64::pixman-0.40.0-h7f8727e_1\n","  pluggy             pkgs/main/linux-64::pluggy-1.0.0-py37h06a4308_1\n","  py-boost           pkgs/main/linux-64::py-boost-1.67.0-py37h04863e7_4\n","  python-dateutil    pkgs/main/noarch::python-dateutil-2.8.2-pyhd3eb1b0_0\n","  pytz               pkgs/main/linux-64::pytz-2022.7-py37h06a4308_0\n","  rdkit              rdkit/linux-64::rdkit-2020.03.3.0-py37hc20afe1_1\n","  ruamel.yaml        pkgs/main/linux-64::ruamel.yaml-0.16.12-py37h7b6447c_1\n","  ruamel.yaml.clib   pkgs/main/linux-64::ruamel.yaml.clib-0.2.6-py37h7f8727e_0\n","  toolz              pkgs/main/linux-64::toolz-0.12.0-py37h06a4308_0\n","  typing_extensions  pkgs/main/linux-64::typing_extensions-4.4.0-py37h06a4308_0\n","  zipp               pkgs/main/linux-64::zipp-3.11.0-py37h06a4308_0\n","  zstd               pkgs/main/linux-64::zstd-1.3.7-h0b5b093_0\n","\n","The following packages will be UPDATED:\n","\n","  ca-certificates                                2020.1.1-0 --> 2024.7.2-h06a4308_0\n","  certifi                                 2019.11.28-py37_0 --> 2022.12.7-py37h06a4308_0\n","  conda                                        4.8.2-py37_0 --> 23.1.0-py37h06a4308_0\n","  openssl                                 1.1.1d-h7b6447c_4 --> 1.1.1w-h7f8727e_0\n","\n","\n","\n","Downloading and Extracting Packages\n","flit-core-3.6.0      | 42 KB     | : 100% 1.0/1 [00:00<00:00,  4.09it/s]\n","ruamel.yaml.clib-0.2 | 133 KB    | : 100% 1.0/1 [00:00<00:00,  5.30it/s]\n","pandas-1.3.5         | 9.3 MB    | : 100% 1.0/1 [00:00<00:00,  1.56it/s]               \n","pixman-0.40.0        | 373 KB    | : 100% 1.0/1 [00:00<00:00,  5.69it/s]\n","pillow-8.2.0         | 622 KB    | : 100% 1.0/1 [00:00<00:00,  4.97it/s]\n","glib-2.63.1          | 2.9 MB    | : 100% 1.0/1 [00:00<00:00,  3.18it/s]\n","intel-openmp-2021.4. | 4.2 MB    | : 100% 1.0/1 [00:00<00:00,  2.36it/s]\n","pcre-8.45            | 207 KB    | : 100% 1.0/1 [00:00<00:00,  5.75it/s]\n","packaging-22.0       | 68 KB     | : 100% 1.0/1 [00:00<00:00,  5.82it/s]\n","conda-23.1.0         | 937 KB    | : 100% 1.0/1 [00:00<00:00,  4.17it/s]\n","pytz-2022.7          | 207 KB    | : 100% 1.0/1 [00:00<00:00,  4.38it/s]\n","numpy-base-1.21.5    | 4.8 MB    | : 100% 1.0/1 [00:00<00:00,  1.72it/s]\n","mkl-service-2.4.0    | 56 KB     | : 100% 1.0/1 [00:00<00:00,  5.80it/s]\n","mkl_random-1.2.2     | 287 KB    | : 100% 1.0/1 [00:00<00:00,  4.73it/s]\n","libuuid-1.0.3        | 17 KB     | : 100% 1.0/1 [00:00<00:00,  4.92it/s]\n","pluggy-1.0.0         | 29 KB     | : 100% 1.0/1 [00:00<00:00,  5.19it/s]\n","importlib-metadata-4 | 40 KB     | : 100% 1.0/1 [00:00<00:00,  5.01it/s]\n","jpeg-9e              | 240 KB    | : 100% 1.0/1 [00:00<00:00,  4.62it/s]\n","freetype-2.11.0      | 618 KB    | : 100% 1.0/1 [00:00<00:00,  4.49it/s]\n","py-boost-1.67.0      | 278 KB    | : 100% 1.0/1 [00:00<00:00,  3.99it/s]\n","ca-certificates-2024 | 127 KB    | : 100% 1.0/1 [00:00<00:00,  4.84it/s]\n","cairo-1.14.12        | 906 KB    | : 100% 1.0/1 [00:00<00:00,  3.61it/s]\n","lcms2-2.12           | 312 KB    | : 100% 1.0/1 [00:00<00:00,  4.61it/s]\n","python-dateutil-2.8. | 233 KB    | : 100% 1.0/1 [00:00<00:00,  4.55it/s]\n","zipp-3.11.0          | 19 KB     | : 100% 1.0/1 [00:00<00:00,  4.80it/s]\n","libpng-1.6.37        | 278 KB    | : 100% 1.0/1 [00:00<00:00,  4.38it/s]\n","toolz-0.12.0         | 104 KB    | : 100% 1.0/1 [00:00<00:00,  4.99it/s]\n","libxml2-2.9.9        | 1.6 MB    | : 100% 1.0/1 [00:00<00:00,  3.00it/s]\n","bottleneck-1.3.4     | 126 KB    | : 100% 1.0/1 [00:00<00:00,  5.19it/s]\n","libboost-1.67.0      | 13.0 MB   | : 100% 1.0/1 [00:02<00:00,  2.07s/it]               \n","numpy-1.21.5         | 10 KB     | : 100% 1.0/1 [00:00<00:00,  5.72it/s]\n","icu-58.2             | 10.5 MB   | : 100% 1.0/1 [00:00<00:00,  1.51it/s]               \n","rdkit-2020.03.3.0    | 24.8 MB   | : 100% 1.0/1 [00:06<00:00,  6.77s/it]\n","importlib_metadata-4 | 12 KB     | : 100% 1.0/1 [00:00<00:00,  5.13it/s]\n","mkl-2021.4.0         | 142.6 MB  | : 100% 1.0/1 [00:12<00:00, 12.78s/it]              \n","openssl-1.1.1w       | 3.7 MB    | : 100% 1.0/1 [00:00<00:00,  2.79it/s]\n","fontconfig-2.13.0    | 227 KB    | : 100% 1.0/1 [00:00<00:00,  5.08it/s]\n","zstd-1.3.7           | 401 KB    | : 100% 1.0/1 [00:00<00:00,  5.39it/s]\n","bzip2-1.0.8          | 78 KB     | : 100% 1.0/1 [00:00<00:00,  5.53it/s]\n","blas-1.0             | 6 KB      | : 100% 1.0/1 [00:00<00:00,  5.08it/s]\n","libtiff-4.1.0        | 447 KB    | : 100% 1.0/1 [00:00<00:00,  4.06it/s]\n","olefile-0.46         | 50 KB     | : 100% 1.0/1 [00:00<00:00,  5.12it/s]\n","typing_extensions-4. | 45 KB     | : 100% 1.0/1 [00:00<00:00,  5.37it/s]\n","ruamel.yaml-0.16.12  | 173 KB    | : 100% 1.0/1 [00:00<00:00,  4.83it/s]\n","numexpr-2.8.1        | 123 KB    | : 100% 1.0/1 [00:00<00:00,  4.95it/s]\n","libxcb-1.15          | 505 KB    | : 100% 1.0/1 [00:00<00:00,  4.01it/s]\n","certifi-2022.12.7    | 150 KB    | : 100% 1.0/1 [00:00<00:00,  5.10it/s]\n","mkl_fft-1.3.1        | 172 KB    | : 100% 1.0/1 [00:00<00:00,  4.92it/s]\n","Preparing transaction: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n","Verifying transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\n","Executing transaction: | \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n"]}]},{"cell_type":"code","metadata":{"id":"Fpu5C7HlwV9s"},"source":["import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"iD9Er-n07SF1","executionInfo":{"status":"ok","timestamp":1724914681982,"user_tz":-330,"elapsed":4838,"user":{"displayName":"","userId":""}},"outputId":"93e4b009-cea7-4b4a-9940-11b3f48518e6","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"GCcE8J5XwjtB"},"source":["df = pd.read_csv('bioactivity_preprocessed_data.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!conda uninstall -y --force rdkit boost boost-cpp\n","!conda install -c rdkit rdkit -y"],"metadata":{"id":"W6UBAFCMEumN","executionInfo":{"status":"ok","timestamp":1724917186811,"user_tz":-330,"elapsed":34668,"user":{"displayName":"","userId":""}},"outputId":"fd7790c1-cd33-4b20-f154-9122284e370d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n","==> WARNING: A newer version of conda exists. <==\n","  current version: 23.1.0\n","  latest version: 24.7.1\n","\n","Please update conda by running\n","\n","    $ conda update -n base -c defaults conda\n","\n","Or to minimize the number of packages updated during conda update use\n","\n","     conda install conda=24.7.1\n","\n","\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  removed specs:\n","    - boost\n","    - boost-cpp\n","    - rdkit\n","\n","\n","The following packages will be REMOVED:\n","\n","  rdkit-2020.03.3.0-py37hc20afe1_1\n","\n","\n","Preparing transaction: - \b\bdone\n","Verifying transaction: | \b\bdone\n","Executing transaction: - \b\b\\ \b\bdone\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\n","Solving environment: | \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","\n","\n","==> WARNING: A newer version of conda exists. <==\n","  current version: 23.1.0\n","  latest version: 24.7.1\n","\n","Please update conda by running\n","\n","    $ conda update -n base -c defaults conda\n","\n","Or to minimize the number of packages updated during conda update use\n","\n","     conda install conda=24.7.1\n","\n","\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - rdkit\n","\n","\n","The following NEW packages will be INSTALLED:\n","\n","  rdkit              rdkit/linux-64::rdkit-2020.03.3.0-py37hc20afe1_1 \n","\n","\n","\n","Downloading and Extracting Packages\n","\n","Preparing transaction: - \b\b\\ \b\bdone\n","Verifying transaction: / \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n","Executing transaction: \\ \b\b| \b\b/ \b\bdone\n"]}]},{"cell_type":"code","source":["!pip install --force-reinstall rdkit-pypi"],"metadata":{"id":"sYTpu5-OFTEt","executionInfo":{"status":"ok","timestamp":1724917319347,"user_tz":-330,"elapsed":18789,"user":{"displayName":"","userId":""}},"outputId":"f8cc8de1-48b3-49e0-c8bf-de988d7d0b57","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdkit-pypi\n","  Downloading rdkit_pypi-2022.9.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.2 MB)\n","\u001b[K     |████████████████████████████████| 29.2 MB 1.3 MB/s \n","\u001b[?25hCollecting Pillow\n","  Downloading Pillow-9.5.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.3 MB)\n","\u001b[K     |████████████████████████████████| 3.3 MB 35.2 MB/s \n","\u001b[?25hCollecting numpy\n","  Downloading numpy-1.21.6-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n","\u001b[K     |████████████████████████████████| 15.7 MB 30.7 MB/s \n","\u001b[?25hInstalling collected packages: Pillow, numpy, rdkit-pypi\n","  Attempting uninstall: Pillow\n","    Found existing installation: Pillow 8.2.0\n","    Uninstalling Pillow-8.2.0:\n","      Successfully uninstalled Pillow-8.2.0\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.21.5\n","    Uninstalling numpy-1.21.5:\n","      Successfully uninstalled numpy-1.21.5\n","Successfully installed Pillow-9.5.0 numpy-1.21.6 rdkit-pypi-2022.9.5\n"]}]},{"cell_type":"code","metadata":{"id":"CgBjIdT-rnRU"},"source":["import numpy as np\n","from rdkit import Chem\n","from rdkit.Chem import Descriptors, Lipinski"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bCXEY7a9ugO_"},"source":["# Inspired by: https://codeocean.com/explore/capsules?query=tag:data-curation\n","\n","def lipinski(smiles, verbose=False):\n","\n","    moldata= []\n","    for elem in smiles:\n","        mol=Chem.MolFromSmiles(elem)\n","        moldata.append(mol)\n","\n","    baseData= np.arange(1,1)\n","    i=0\n","    for mol in moldata:\n","\n","        desc_MolWt = Descriptors.MolWt(mol)\n","        desc_MolLogP = Descriptors.MolLogP(mol)\n","        desc_NumHDonors = Lipinski.NumHDonors(mol)\n","        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)\n","\n","        row = np.array([desc_MolWt,\n","                        desc_MolLogP,\n","                        desc_NumHDonors,\n","                        desc_NumHAcceptors])\n","\n","        if(i==0):\n","            baseData=row\n","        else:\n","            baseData=np.vstack([baseData, row])\n","        i=i+1\n","\n","    columnNames=[\"MW\",\"LogP\",\"NumHDonors\",\"NumHAcceptors\"]\n","    descriptors = pd.DataFrame(data=baseData,columns=columnNames)\n","\n","    return descriptors"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ThFIFw8IukMY"},"source":["df_lipinski = lipinski(df.canonical_smiles)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DaezyM5vwp9n","outputId":"f0c7142b-ed55-42e1-ec20-13b89c522d5a","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1724917369812,"user_tz":-330,"elapsed":499,"user":{"displayName":"","userId":""}}},"source":["df_lipinski"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           MW     LogP  NumHDonors  NumHAcceptors\n","0     329.528  4.28820         2.0            2.0\n","1     315.501  3.89810         2.0            2.0\n","2     412.306  5.70542         0.0            3.0\n","3     319.383  4.63450         0.0            3.0\n","4     321.811  4.58780         0.0            3.0\n","...       ...      ...         ...            ...\n","3458  292.338  3.17100         0.0            4.0\n","3459  278.311  2.86800         1.0            4.0\n","3460  338.410  4.82940         0.0            3.0\n","3461  262.312  3.16240         0.0            3.0\n","3462  285.310  2.65916         0.0            5.0\n","\n","[3463 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-a629dc2c-2163-4d87-9786-5d2543af5b6e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>329.528</td>\n","      <td>4.28820</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>315.501</td>\n","      <td>3.89810</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>412.306</td>\n","      <td>5.70542</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>319.383</td>\n","      <td>4.63450</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>321.811</td>\n","      <td>4.58780</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3458</th>\n","      <td>292.338</td>\n","      <td>3.17100</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3459</th>\n","      <td>278.311</td>\n","      <td>2.86800</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3460</th>\n","      <td>338.410</td>\n","      <td>4.82940</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3461</th>\n","      <td>262.312</td>\n","      <td>3.16240</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3462</th>\n","      <td>285.310</td>\n","      <td>2.65916</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3463 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a629dc2c-2163-4d87-9786-5d2543af5b6e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a629dc2c-2163-4d87-9786-5d2543af5b6e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a629dc2c-2163-4d87-9786-5d2543af5b6e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-05d8415b-c4a6-4eb8-ad73-cb75a828b2d0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-05d8415b-c4a6-4eb8-ad73-cb75a828b2d0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-05d8415b-c4a6-4eb8-ad73-cb75a828b2d0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_58906a0a-81cf-4775-a040-d1f9b2ee9e17\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_lipinski')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_58906a0a-81cf-4775-a040-d1f9b2ee9e17 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_lipinski');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_lipinski","summary":"{\n  \"name\": \"df_lipinski\",\n  \"rows\": 3463,\n  \"fields\": [\n    {\n      \"column\": \"MW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.16876886680704,\n        \"min\": 130.078,\n        \"max\": 914.6640000000001,\n        \"num_unique_values\": 1688,\n        \"samples\": [\n          377.5100000000001,\n          383.4070000000001,\n          271.2320000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.347637381375973,\n        \"min\": -1.4028000000000012,\n        \"max\": 10.305999999999996,\n        \"num_unique_values\": 1872,\n        \"samples\": [\n          5.867000000000006,\n          4.202100000000003,\n          8.614600000000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHDonors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9937236024300431,\n        \"min\": 0.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          9.0,\n          0.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHAcceptors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.806702399896344,\n        \"min\": 0.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          9.0,\n          11.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":112}]},{"cell_type":"code","metadata":{"id":"9-ChzM8_wuq_","outputId":"16c5f496-7b36-43fe-c116-3f0c5669d17d","colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"status":"ok","timestamp":1724917379026,"user_tz":-330,"elapsed":445,"user":{"displayName":"","userId":""}}},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL341591          CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12   \n","1         CHEMBL2111947  C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...   \n","2          CHEMBL431859      CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21   \n","3          CHEMBL113637             CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21   \n","4          CHEMBL112021                 Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21   \n","...                 ...                                                ...   \n","3458      CHEMBL5278229                COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1   \n","3459      CHEMBL5275747                 O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1   \n","3460      CHEMBL5273068         O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1   \n","3461       CHEMBL223176                    O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1   \n","3462         CHEMBL1444               N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1   \n","\n","      standard_value  \n","0             7100.0  \n","1            50000.0  \n","2              238.0  \n","3               57.0  \n","4               54.0  \n","...              ...  \n","3458           237.8  \n","3459          1100.0  \n","3460          2531.0  \n","3461           252.4  \n","3462            10.0  \n","\n","[3463 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-a641d0a4-2407-41a2-a0d9-5dee4aba4a00\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>standard_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL341591</td>\n","      <td>CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12</td>\n","      <td>7100.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL2111947</td>\n","      <td>C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...</td>\n","      <td>50000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL431859</td>\n","      <td>CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21</td>\n","      <td>238.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL113637</td>\n","      <td>CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL112021</td>\n","      <td>Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21</td>\n","      <td>54.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3458</th>\n","      <td>CHEMBL5278229</td>\n","      <td>COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1</td>\n","      <td>237.8</td>\n","    </tr>\n","    <tr>\n","      <th>3459</th>\n","      <td>CHEMBL5275747</td>\n","      <td>O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>1100.0</td>\n","    </tr>\n","    <tr>\n","      <th>3460</th>\n","      <td>CHEMBL5273068</td>\n","      <td>O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1</td>\n","      <td>2531.0</td>\n","    </tr>\n","    <tr>\n","      <th>3461</th>\n","      <td>CHEMBL223176</td>\n","      <td>O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>252.4</td>\n","    </tr>\n","    <tr>\n","      <th>3462</th>\n","      <td>CHEMBL1444</td>\n","      <td>N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1</td>\n","      <td>10.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3463 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a641d0a4-2407-41a2-a0d9-5dee4aba4a00')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a641d0a4-2407-41a2-a0d9-5dee4aba4a00 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a641d0a4-2407-41a2-a0d9-5dee4aba4a00');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b55b4ea6-29cd-4547-a064-66b320497a58\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b55b4ea6-29cd-4547-a064-66b320497a58')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b55b4ea6-29cd-4547-a064-66b320497a58 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_605cb815-8d66-4892-a51a-ec6169bd46bc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_605cb815-8d66-4892-a51a-ec6169bd46bc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 3463,\n  \"fields\": [\n    {\n      \"column\": \"molecule_chembl_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"CHEMBL336102\",\n          \"CHEMBL5280326\",\n          \"CHEMBL2331704\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"canonical_smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"CCC(C(=O)OC1CC2CC([C@@H]1C)C2(C)C)c1ccncc1\",\n          \"CCC#CCOc1ccc2cc(C(O)(c3ccc(Cl)cc3)c3cccnc3)oc2c1\",\n          \"COC(C)(C)c1cncc(-c2ccc3c(c2)CCc2nnc(C)n2-3)c1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"standard_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 661002878910.6675,\n        \"min\": 0.0,\n        \"max\": 33884415613920.34,\n        \"num_unique_values\": 1553,\n        \"samples\": [\n          26001.6,\n          9000.0,\n          586.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":113}]},{"cell_type":"code","metadata":{"id":"L9nUZC0Ww3gp"},"source":["df_combined = pd.concat([df,df_lipinski], axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FRBfBP3QxFJp","outputId":"664051c3-691f-4e4e-c825-b48a33d33bcc","colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"status":"ok","timestamp":1724917400852,"user_tz":-330,"elapsed":526,"user":{"displayName":"","userId":""}}},"source":["df_combined"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL341591          CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12   \n","1         CHEMBL2111947  C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...   \n","2          CHEMBL431859      CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21   \n","3          CHEMBL113637             CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21   \n","4          CHEMBL112021                 Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21   \n","...                 ...                                                ...   \n","3458      CHEMBL5278229                COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1   \n","3459      CHEMBL5275747                 O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1   \n","3460      CHEMBL5273068         O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1   \n","3461       CHEMBL223176                    O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1   \n","3462         CHEMBL1444               N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1   \n","\n","      standard_value       MW     LogP  NumHDonors  NumHAcceptors  \n","0             7100.0  329.528  4.28820         2.0            2.0  \n","1            50000.0  315.501  3.89810         2.0            2.0  \n","2              238.0  412.306  5.70542         0.0            3.0  \n","3               57.0  319.383  4.63450         0.0            3.0  \n","4               54.0  321.811  4.58780         0.0            3.0  \n","...              ...      ...      ...         ...            ...  \n","3458           237.8  292.338  3.17100         0.0            4.0  \n","3459          1100.0  278.311  2.86800         1.0            4.0  \n","3460          2531.0  338.410  4.82940         0.0            3.0  \n","3461           252.4  262.312  3.16240         0.0            3.0  \n","3462            10.0  285.310  2.65916         0.0            5.0  \n","\n","[3463 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-f39179f9-8ba1-4868-b2a4-0f0e6a9fd794\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>standard_value</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL341591</td>\n","      <td>CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12</td>\n","      <td>7100.0</td>\n","      <td>329.528</td>\n","      <td>4.28820</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL2111947</td>\n","      <td>C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...</td>\n","      <td>50000.0</td>\n","      <td>315.501</td>\n","      <td>3.89810</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL431859</td>\n","      <td>CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21</td>\n","      <td>238.0</td>\n","      <td>412.306</td>\n","      <td>5.70542</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL113637</td>\n","      <td>CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21</td>\n","      <td>57.0</td>\n","      <td>319.383</td>\n","      <td>4.63450</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL112021</td>\n","      <td>Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21</td>\n","      <td>54.0</td>\n","      <td>321.811</td>\n","      <td>4.58780</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3458</th>\n","      <td>CHEMBL5278229</td>\n","      <td>COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1</td>\n","      <td>237.8</td>\n","      <td>292.338</td>\n","      <td>3.17100</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3459</th>\n","      <td>CHEMBL5275747</td>\n","      <td>O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>1100.0</td>\n","      <td>278.311</td>\n","      <td>2.86800</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3460</th>\n","      <td>CHEMBL5273068</td>\n","      <td>O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1</td>\n","      <td>2531.0</td>\n","      <td>338.410</td>\n","      <td>4.82940</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3461</th>\n","      <td>CHEMBL223176</td>\n","      <td>O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>252.4</td>\n","      <td>262.312</td>\n","      <td>3.16240</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3462</th>\n","      <td>CHEMBL1444</td>\n","      <td>N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1</td>\n","      <td>10.0</td>\n","      <td>285.310</td>\n","      <td>2.65916</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3463 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f39179f9-8ba1-4868-b2a4-0f0e6a9fd794')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f39179f9-8ba1-4868-b2a4-0f0e6a9fd794 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f39179f9-8ba1-4868-b2a4-0f0e6a9fd794');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2a0c1109-49ec-4ebb-a205-f83c5388e736\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a0c1109-49ec-4ebb-a205-f83c5388e736')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2a0c1109-49ec-4ebb-a205-f83c5388e736 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7871cb86-89c6-45fe-8bf4-136c9ba67827\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_combined')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7871cb86-89c6-45fe-8bf4-136c9ba67827 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_combined');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_combined","summary":"{\n  \"name\": \"df_combined\",\n  \"rows\": 3463,\n  \"fields\": [\n    {\n      \"column\": \"molecule_chembl_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"CHEMBL336102\",\n          \"CHEMBL5280326\",\n          \"CHEMBL2331704\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"canonical_smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"CCC(C(=O)OC1CC2CC([C@@H]1C)C2(C)C)c1ccncc1\",\n          \"CCC#CCOc1ccc2cc(C(O)(c3ccc(Cl)cc3)c3cccnc3)oc2c1\",\n          \"COC(C)(C)c1cncc(-c2ccc3c(c2)CCc2nnc(C)n2-3)c1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"standard_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 661002878910.6675,\n        \"min\": 0.0,\n        \"max\": 33884415613920.34,\n        \"num_unique_values\": 1553,\n        \"samples\": [\n          26001.6,\n          9000.0,\n          586.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.16876886680704,\n        \"min\": 130.078,\n        \"max\": 914.6640000000001,\n        \"num_unique_values\": 1688,\n        \"samples\": [\n          377.5100000000001,\n          383.4070000000001,\n          271.2320000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.347637381375973,\n        \"min\": -1.4028000000000012,\n        \"max\": 10.305999999999996,\n        \"num_unique_values\": 1872,\n        \"samples\": [\n          5.867000000000006,\n          4.202100000000003,\n          8.614600000000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHDonors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9937236024300431,\n        \"min\": 0.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          9.0,\n          0.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHAcceptors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.806702399896344,\n        \"min\": 0.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          9.0,\n          11.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":115}]},{"cell_type":"code","metadata":{"id":"UXMuFQoQ4pZF"},"source":["# https://github.com/chaninlab/estrogen-receptor-alpha-qsar/blob/master/02_ER_alpha_RO5.ipynb\n","\n","import numpy as np\n","\n","def pIC50(input):\n","    pIC50 = []\n","\n","    for i in input['standard_value_norm']:\n","        molar = i*(10**-9) # Converts nM to M\n","        pIC50.append(-np.log10(molar))\n","\n","    input['pIC50'] = pIC50\n","    x = input.drop('standard_value_norm',axis 1)\n","\n","    return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QuUTFUpcR1wU","outputId":"aa82c187-fa60-475b-8582-36b1127ad984","colab":{"base_uri":"https://localhost:8080/","height":335},"executionInfo":{"status":"ok","timestamp":1724917426478,"user_tz":-330,"elapsed":384,"user":{"displayName":"","userId":""}}},"source":["df_combined.standard_value.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3.463000e+03\n","mean     1.813929e+10\n","std      6.610029e+11\n","min      0.000000e+00\n","25%      1.270000e+02\n","50%      1.070000e+03\n","75%      7.288900e+03\n","max      3.388442e+13\n","Name: standard_value, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>standard_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3.463000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.813929e+10</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.610029e+11</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.270000e+02</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.070000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>7.288900e+03</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>3.388442e+13</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","metadata":{"id":"QyiJ0to5N6Z_","outputId":"e31245cc-1208-4dbe-c0c1-43b619344e1f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724917434644,"user_tz":-330,"elapsed":434,"user":{"displayName":"","userId":""}}},"source":["-np.log10( (10**-9)* 100000000 )"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":118}]},{"cell_type":"code","metadata":{"id":"9S1aJkOYOP6K","outputId":"852d2f5e-ef56-41a6-ba02-0598bb6bdb2c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724917442744,"user_tz":-330,"elapsed":402,"user":{"displayName":"","userId":""}}},"source":["-np.log10( (10**-9)* 10000000000 )"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.0"]},"metadata":{},"execution_count":119}]},{"cell_type":"code","metadata":{"id":"iktHDDwtPDwl"},"source":["def norm_value(input):\n","    norm = []\n","\n","    for i in input['standard_value']:\n","        if i > 100000000:\n","          i = 100000000\n","        norm.append(i)\n","\n","    input['standard_value_norm'] = norm\n","    x = input.drop('standard_value', axix 1)\n","\n","    return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def norm_value(input):\n","    norm = []\n","\n","    for i in input['standard_value']:\n","        if i > 100000000:\n","          i = 100000000\n","        norm.append(i)\n","\n","    input['standard_value_norm'] = norm\n","    x = input.drop('standard_value', axis=1) # or input.drop('standard_value')\n","\n","    return x"],"metadata":{"id":"of7YRtyIGRdE"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EX2Mj2-ZP1Rj","outputId":"f7cc9445-72c3-4ac5-f96f-ee73007649dc","colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"status":"ok","timestamp":1724917562984,"user_tz":-330,"elapsed":425,"user":{"displayName":"","userId":""}}},"source":["df_norm = norm_value(df_combined)\n","df_norm"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL341591          CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12   \n","1         CHEMBL2111947  C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...   \n","2          CHEMBL431859      CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21   \n","3          CHEMBL113637             CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21   \n","4          CHEMBL112021                 Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21   \n","...                 ...                                                ...   \n","3458      CHEMBL5278229                COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1   \n","3459      CHEMBL5275747                 O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1   \n","3460      CHEMBL5273068         O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1   \n","3461       CHEMBL223176                    O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1   \n","3462         CHEMBL1444               N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1   \n","\n","           MW     LogP  NumHDonors  NumHAcceptors  standard_value_norm  \n","0     329.528  4.28820         2.0            2.0               7100.0  \n","1     315.501  3.89810         2.0            2.0              50000.0  \n","2     412.306  5.70542         0.0            3.0                238.0  \n","3     319.383  4.63450         0.0            3.0                 57.0  \n","4     321.811  4.58780         0.0            3.0                 54.0  \n","...       ...      ...         ...            ...                  ...  \n","3458  292.338  3.17100         0.0            4.0                237.8  \n","3459  278.311  2.86800         1.0            4.0               1100.0  \n","3460  338.410  4.82940         0.0            3.0               2531.0  \n","3461  262.312  3.16240         0.0            3.0                252.4  \n","3462  285.310  2.65916         0.0            5.0                 10.0  \n","\n","[3463 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-5bb12010-ec62-40f3-9f57-0ee6fec2bae6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","      <th>standard_value_norm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL341591</td>\n","      <td>CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12</td>\n","      <td>329.528</td>\n","      <td>4.28820</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>7100.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL2111947</td>\n","      <td>C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...</td>\n","      <td>315.501</td>\n","      <td>3.89810</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>50000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL431859</td>\n","      <td>CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21</td>\n","      <td>412.306</td>\n","      <td>5.70542</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>238.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL113637</td>\n","      <td>CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21</td>\n","      <td>319.383</td>\n","      <td>4.63450</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>57.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL112021</td>\n","      <td>Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21</td>\n","      <td>321.811</td>\n","      <td>4.58780</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>54.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3458</th>\n","      <td>CHEMBL5278229</td>\n","      <td>COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1</td>\n","      <td>292.338</td>\n","      <td>3.17100</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>237.8</td>\n","    </tr>\n","    <tr>\n","      <th>3459</th>\n","      <td>CHEMBL5275747</td>\n","      <td>O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>278.311</td>\n","      <td>2.86800</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>1100.0</td>\n","    </tr>\n","    <tr>\n","      <th>3460</th>\n","      <td>CHEMBL5273068</td>\n","      <td>O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1</td>\n","      <td>338.410</td>\n","      <td>4.82940</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>2531.0</td>\n","    </tr>\n","    <tr>\n","      <th>3461</th>\n","      <td>CHEMBL223176</td>\n","      <td>O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>262.312</td>\n","      <td>3.16240</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>252.4</td>\n","    </tr>\n","    <tr>\n","      <th>3462</th>\n","      <td>CHEMBL1444</td>\n","      <td>N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1</td>\n","      <td>285.310</td>\n","      <td>2.65916</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>10.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3463 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bb12010-ec62-40f3-9f57-0ee6fec2bae6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5bb12010-ec62-40f3-9f57-0ee6fec2bae6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5bb12010-ec62-40f3-9f57-0ee6fec2bae6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-921c915c-abf3-491c-a425-80aef78a55a3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-921c915c-abf3-491c-a425-80aef78a55a3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-921c915c-abf3-491c-a425-80aef78a55a3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f71b0a4b-ecbe-4daa-9553-d7a68d8f76c7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_norm')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f71b0a4b-ecbe-4daa-9553-d7a68d8f76c7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_norm');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_norm","summary":"{\n  \"name\": \"df_norm\",\n  \"rows\": 3463,\n  \"fields\": [\n    {\n      \"column\": \"molecule_chembl_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"CHEMBL336102\",\n          \"CHEMBL5280326\",\n          \"CHEMBL2331704\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"canonical_smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2597,\n        \"samples\": [\n          \"CCC(C(=O)OC1CC2CC([C@@H]1C)C2(C)C)c1ccncc1\",\n          \"CCC#CCOc1ccc2cc(C(O)(c3ccc(Cl)cc3)c3cccnc3)oc2c1\",\n          \"COC(C)(C)c1cncc(-c2ccc3c(c2)CCc2nnc(C)n2-3)c1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89.16876886680704,\n        \"min\": 130.078,\n        \"max\": 914.6640000000001,\n        \"num_unique_values\": 1688,\n        \"samples\": [\n          377.5100000000001,\n          383.4070000000001,\n          271.2320000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.347637381375973,\n        \"min\": -1.4028000000000012,\n        \"max\": 10.305999999999996,\n        \"num_unique_values\": 1872,\n        \"samples\": [\n          5.867000000000006,\n          4.202100000000003,\n          8.614600000000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHDonors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9937236024300431,\n        \"min\": 0.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          9.0,\n          0.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHAcceptors\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.806702399896344,\n        \"min\": 0.0,\n        \"max\": 15.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          9.0,\n          11.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"standard_value_norm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4524183.832343307,\n        \"min\": 0.0,\n        \"max\": 100000000.0,\n        \"num_unique_values\": 1547,\n        \"samples\": [\n          14000.0,\n          47.0,\n          1546.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":125}]},{"cell_type":"code","metadata":{"id":"hb1eKrIjRiH9","outputId":"87f90283-da69-4f1e-ae9d-00cd0c5fdcf3","colab":{"base_uri":"https://localhost:8080/","height":335},"executionInfo":{"status":"ok","timestamp":1724917606757,"user_tz":-330,"elapsed":504,"user":{"displayName":"","userId":""}}},"source":["df_norm.standard_value_norm.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3.463000e+03\n","mean     2.710253e+05\n","std      4.524184e+06\n","min      0.000000e+00\n","25%      1.270000e+02\n","50%      1.070000e+03\n","75%      7.288900e+03\n","max      1.000000e+08\n","Name: standard_value_norm, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>standard_value_norm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3.463000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2.710253e+05</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>4.524184e+06</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.270000e+02</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.070000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>7.288900e+03</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000e+08</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":126}]},{"cell_type":"code","source":["def pIC50(input):\n","    pIC50 = []\n","\n","    for i in input['standard_value_norm']:\n","        molar = i*(10**-9) # Converts nM to M\n","        pIC50.append(-np.log10(molar))\n","\n","    input['pIC50'] = pIC50\n","    x = input.drop('standard_value_norm', axis=1) # Pass axis as a keyword argument\n","\n","    return x"],"metadata":{"id":"sxtZdFvaHEM5"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UDKZzmK57YnS","outputId":"9f5447fa-8f24-4395-f7fd-a3a0f7348e79","colab":{"base_uri":"https://localhost:8080/","height":532},"executionInfo":{"status":"ok","timestamp":1724917794885,"user_tz":-330,"elapsed":442,"user":{"displayName":"","userId":""}}},"source":["df_final = pIC50(df_norm)\n","df_final"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-128-d217f3a12a32>:6: RuntimeWarning: divide by zero encountered in log10\n","  pIC50.append(-np.log10(molar))\n","/usr/local/lib/python3.10/dist-packages/pandas/core/nanops.py:1010: RuntimeWarning: invalid value encountered in subtract\n","  sqr = _ensure_numeric((avg - values) ** 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["     molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL341591          CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12   \n","1         CHEMBL2111947  C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...   \n","2          CHEMBL431859      CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21   \n","3          CHEMBL113637             CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21   \n","4          CHEMBL112021                 Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21   \n","...                 ...                                                ...   \n","3458      CHEMBL5278229                COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1   \n","3459      CHEMBL5275747                 O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1   \n","3460      CHEMBL5273068         O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1   \n","3461       CHEMBL223176                    O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1   \n","3462         CHEMBL1444               N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1   \n","\n","           MW     LogP  NumHDonors  NumHAcceptors     pIC50  \n","0     329.528  4.28820         2.0            2.0  5.148742  \n","1     315.501  3.89810         2.0            2.0  4.301030  \n","2     412.306  5.70542         0.0            3.0  6.623423  \n","3     319.383  4.63450         0.0            3.0  7.244125  \n","4     321.811  4.58780         0.0            3.0  7.267606  \n","...       ...      ...         ...            ...       ...  \n","3458  292.338  3.17100         0.0            4.0  6.623788  \n","3459  278.311  2.86800         1.0            4.0  5.958607  \n","3460  338.410  4.82940         0.0            3.0  5.596708  \n","3461  262.312  3.16240         0.0            3.0  6.597911  \n","3462  285.310  2.65916         0.0            5.0  8.000000  \n","\n","[3463 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-8b2ec44c-a85a-4489-9984-620a9b65ffcb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","      <th>pIC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL341591</td>\n","      <td>CC12CCC(O)CC1=CCC1C2CCC2(C)C(CC3CN3)CCC12</td>\n","      <td>329.528</td>\n","      <td>4.28820</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>5.148742</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL2111947</td>\n","      <td>C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...</td>\n","      <td>315.501</td>\n","      <td>3.89810</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>4.301030</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL431859</td>\n","      <td>CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21</td>\n","      <td>412.306</td>\n","      <td>5.70542</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>6.623423</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL113637</td>\n","      <td>CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21</td>\n","      <td>319.383</td>\n","      <td>4.63450</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>7.244125</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL112021</td>\n","      <td>Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21</td>\n","      <td>321.811</td>\n","      <td>4.58780</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>7.267606</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3458</th>\n","      <td>CHEMBL5278229</td>\n","      <td>COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1</td>\n","      <td>292.338</td>\n","      <td>3.17100</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>6.623788</td>\n","    </tr>\n","    <tr>\n","      <th>3459</th>\n","      <td>CHEMBL5275747</td>\n","      <td>O=C(c1ccc(O)cc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>278.311</td>\n","      <td>2.86800</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>5.958607</td>\n","    </tr>\n","    <tr>\n","      <th>3460</th>\n","      <td>CHEMBL5273068</td>\n","      <td>O=C(c1ccc(Cn2ccnc2)cc1)c1ccc(-c2ccccc2)cc1</td>\n","      <td>338.410</td>\n","      <td>4.82940</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>5.596708</td>\n","    </tr>\n","    <tr>\n","      <th>3461</th>\n","      <td>CHEMBL223176</td>\n","      <td>O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>262.312</td>\n","      <td>3.16240</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>6.597911</td>\n","    </tr>\n","    <tr>\n","      <th>3462</th>\n","      <td>CHEMBL1444</td>\n","      <td>N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1</td>\n","      <td>285.310</td>\n","      <td>2.65916</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>8.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3463 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b2ec44c-a85a-4489-9984-620a9b65ffcb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8b2ec44c-a85a-4489-9984-620a9b65ffcb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8b2ec44c-a85a-4489-9984-620a9b65ffcb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-087bf64e-2494-4d89-b109-cde31cfabee5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-087bf64e-2494-4d89-b109-cde31cfabee5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-087bf64e-2494-4d89-b109-cde31cfabee5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b744552d-cec1-4c76-a422-ce2eab50d9c8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_final')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b744552d-cec1-4c76-a422-ce2eab50d9c8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_final');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_final","repr_error":"Out of range float values are not JSON compliant: inf"}},"metadata":{},"execution_count":129}]},{"cell_type":"code","metadata":{"id":"BoqY53udSTYC","outputId":"62f15d17-69c2-4f7f-b322-6b6f149e35ce","colab":{"base_uri":"https://localhost:8080/","height":335},"executionInfo":{"status":"ok","timestamp":1724917815151,"user_tz":-330,"elapsed":411,"user":{"displayName":"","userId":""}}},"source":["df_final.pIC50.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    3463.000000\n","mean             inf\n","std              NaN\n","min         1.000000\n","25%         5.137339\n","50%         5.970616\n","75%         6.896196\n","max              inf\n","Name: pIC50, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pIC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>3463.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>inf</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.137339</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>5.970616</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.896196</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>inf</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":130}]},{"cell_type":"code","metadata":{"id":"HmrndhDW3c7Z","outputId":"5b4324ce-d2ec-4aa3-975b-616606f0af11","colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"status":"error","timestamp":1724917827953,"user_tz":-330,"elapsed":516,"user":{"displayName":"","userId":""}}},"source":["df_2class = df_final[df_final.bioactivity_class != 'intermediate']\n","df_2class"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'DataFrame' object has no attribute 'bioactivity_class'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-131-c130062fdf85>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_2class\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_final\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbioactivity_class\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'intermediate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf_2class\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6202\u001b[0m         ):\n\u001b[1;32m   6203\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6204\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6206\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'bioactivity_class'"]}]},{"cell_type":"code","source":["# Add the 'bioactivity_class' list as a column to the DataFrame\n","df_final['bioactivity_class'] = bioactivity_class\n","\n","# Now you can filter the DataFrame\n","df_2class = df_final[df_final.bioactivity_class != 'intermediate']\n","df_2class"],"metadata":{"id":"PDIsNf56Hmdo","executionInfo":{"status":"ok","timestamp":1724917909149,"user_tz":-330,"elapsed":418,"user":{"displayName":"","userId":""}},"outputId":"eba8bbd5-5a1e-48d4-d5ee-55ae2dae5565","colab":{"base_uri":"https://localhost:8080/","height":496}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pandas/core/nanops.py:1010: RuntimeWarning: invalid value encountered in subtract\n","  sqr = _ensure_numeric((avg - values) ** 2)\n"]},{"output_type":"execute_result","data":{"text/plain":["     molecule_chembl_id                                   canonical_smiles  \\\n","1         CHEMBL2111947  C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...   \n","2          CHEMBL431859      CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21   \n","3          CHEMBL113637             CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21   \n","4          CHEMBL112021                 Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21   \n","6           CHEMBL41761             CCn1ccc2cc(C(c3ccc(F)cc3)n3ccnc3)ccc21   \n","...                 ...                                                ...   \n","3456      CHEMBL5285636                COc1ccc(C(=O)c2cccc(Cn3ccnc3)c2)cc1   \n","3457      CHEMBL5266533                 O=C(c1ccc(O)cc1)c1cccc(Cn2ccnc2)c1   \n","3458      CHEMBL5278229                COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1   \n","3461       CHEMBL223176                    O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1   \n","3462         CHEMBL1444               N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1   \n","\n","           MW     LogP  NumHDonors  NumHAcceptors     pIC50 bioactivity_class  \n","1     315.501  3.89810         2.0            2.0  4.301030          inactive  \n","2     412.306  5.70542         0.0            3.0  6.623423            active  \n","3     319.383  4.63450         0.0            3.0  7.244125            active  \n","4     321.811  4.58780         0.0            3.0  7.267606            active  \n","6     319.383  4.63450         0.0            3.0  7.387216            active  \n","...       ...      ...         ...            ...       ...               ...  \n","3456  292.338  3.17100         0.0            4.0  7.886057            active  \n","3457  278.311  2.86800         1.0            4.0  7.886057            active  \n","3458  292.338  3.17100         0.0            4.0  6.623788            active  \n","3461  262.312  3.16240         0.0            3.0  6.597911            active  \n","3462  285.310  2.65916         0.0            5.0  8.000000            active  \n","\n","[2479 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-d11ea1f8-7bf2-4198-9391-408975a57b5d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","      <th>pIC50</th>\n","      <th>bioactivity_class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL2111947</td>\n","      <td>C[C@]12CC[C@H]3[C@@H](CC=C4C[C@@H](O)CC[C@@]43...</td>\n","      <td>315.501</td>\n","      <td>3.89810</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>4.301030</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL431859</td>\n","      <td>CCn1c(C(c2ccc(F)cc2)n2ccnc2)c(C)c2cc(Br)ccc21</td>\n","      <td>412.306</td>\n","      <td>5.70542</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>6.623423</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL113637</td>\n","      <td>CCn1cc(C(c2ccc(F)cc2)n2ccnc2)c2ccccc21</td>\n","      <td>319.383</td>\n","      <td>4.63450</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>7.244125</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL112021</td>\n","      <td>Clc1ccccc1Cn1cc(Cn2ccnc2)c2ccccc21</td>\n","      <td>321.811</td>\n","      <td>4.58780</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>7.267606</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>CHEMBL41761</td>\n","      <td>CCn1ccc2cc(C(c3ccc(F)cc3)n3ccnc3)ccc21</td>\n","      <td>319.383</td>\n","      <td>4.63450</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>7.387216</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3456</th>\n","      <td>CHEMBL5285636</td>\n","      <td>COc1ccc(C(=O)c2cccc(Cn3ccnc3)c2)cc1</td>\n","      <td>292.338</td>\n","      <td>3.17100</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>7.886057</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>3457</th>\n","      <td>CHEMBL5266533</td>\n","      <td>O=C(c1ccc(O)cc1)c1cccc(Cn2ccnc2)c1</td>\n","      <td>278.311</td>\n","      <td>2.86800</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>7.886057</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>3458</th>\n","      <td>CHEMBL5278229</td>\n","      <td>COc1ccc(C(=O)c2ccc(Cn3ccnc3)cc2)cc1</td>\n","      <td>292.338</td>\n","      <td>3.17100</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>6.623788</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>3461</th>\n","      <td>CHEMBL223176</td>\n","      <td>O=C(c1ccccc1)c1ccc(Cn2ccnc2)cc1</td>\n","      <td>262.312</td>\n","      <td>3.16240</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>6.597911</td>\n","      <td>active</td>\n","    </tr>\n","    <tr>\n","      <th>3462</th>\n","      <td>CHEMBL1444</td>\n","      <td>N#Cc1ccc(C(c2ccc(C#N)cc2)n2cncn2)cc1</td>\n","      <td>285.310</td>\n","      <td>2.65916</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>8.000000</td>\n","      <td>active</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2479 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d11ea1f8-7bf2-4198-9391-408975a57b5d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d11ea1f8-7bf2-4198-9391-408975a57b5d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d11ea1f8-7bf2-4198-9391-408975a57b5d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a5eb8256-d915-422c-a89a-1c24c77a4669\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5eb8256-d915-422c-a89a-1c24c77a4669')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a5eb8256-d915-422c-a89a-1c24c77a4669 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4cf5d197-d6d3-4d1c-b3bb-2378aa94dee4\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2class')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4cf5d197-d6d3-4d1c-b3bb-2378aa94dee4 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_2class');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_2class","repr_error":"Out of range float values are not JSON compliant: inf"}},"metadata":{},"execution_count":132}]},{"cell_type":"code","metadata":{"id":"0Egq_rNsxtIj"},"source":["import seaborn as sns\n","sns.set(style='ticks')\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"w2Ia0iycdMO2","outputId":"1e9cc3d8-68a7-4a3d-9982-5cde5137a44a","colab":{"base_uri":"https://localhost:8080/","height":513},"executionInfo":{"status":"ok","timestamp":1724917944540,"user_tz":-330,"elapsed":1314,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.countplot(x='bioactivity_class', data=df_2class, edgecolor='black')\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('Frequency', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_bioactivity_class.pdf')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"F79BNwjF0nub","outputId":"ce61a62f-36de-417c-d17d-aab7795c895b","colab":{"base_uri":"https://localhost:8080/","height":883},"executionInfo":{"status":"error","timestamp":1724918227420,"user_tz":-330,"elapsed":267920,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.scatterplot(x='MW', y='LogP', data=df_2class, hue='bioactivity_class', size='pIC50', edgecolor='black', alpha=0.7)\n","\n","plt.xlabel('MW', fontsize=14, fontweight='bold')\n","plt.ylabel('LogP', fontsize=14, fontweight='bold')\n","plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)\n","plt.savefig('plot_MW_vs_LogP.pdf')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/matplotlib/colors.py:1355: RuntimeWarning: invalid value encountered in divide\n","  resdat /= (vmax - vmin)\n","/usr/local/lib/python3.10/dist-packages/matplotlib/colors.py:1355: RuntimeWarning: invalid value encountered in divide\n","  resdat /= (vmax - vmin)\n"]},{"output_type":"error","ename":"ValueError","evalue":"Can only output finite numbers in PDF","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-135-7a9af53ed238>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'LogP'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m14\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontweight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bold'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox_to_anchor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.05\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mborderaxespad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'plot_MW_vs_LogP.pdf'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1021\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1022\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1023\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1024\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Need this if 'transparent=True', to reset colors.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   3341\u001b[0m                         ax.patch._cm_set(facecolor='none', edgecolor='none'))\n\u001b[1;32m   3342\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3343\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3344\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3345\u001b[0m     def ginput(self, n=1, timeout=30, show_clicks=True,\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2364\u001b[0m                 \u001b[0;31m# force the figure dpi to 72), so we need to set it again here.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2365\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2366\u001b[0;31m                     result = print_method(\n\u001b[0m\u001b[1;32m   2367\u001b[0m                         \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2368\u001b[0m                         \u001b[0mfacecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfacecolor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   2230\u001b[0m                 \"bbox_inches_restore\"}\n\u001b[1;32m   2231\u001b[0m             \u001b[0mskip\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptional_kws\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmeth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2232\u001b[0;31m             print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\n\u001b[0m\u001b[1;32m   2233\u001b[0m                 *args, **{k: v for k, v in kwargs.items() if k not in skip}))\n\u001b[1;32m   2234\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Let third-parties do as they see fit.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36mprint_pdf\u001b[0;34m(self, filename, bbox_inches_restore, metadata)\u001b[0m\n\u001b[1;32m   2813\u001b[0m                 \u001b[0mRendererPdf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2814\u001b[0m                 bbox_inches_restore=bbox_inches_restore)\n\u001b[0;32m-> 2815\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2816\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinalize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2817\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPdfPages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rasterizing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   3138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3139\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3140\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   3141\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   3142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   3062\u001b[0m             \u001b[0m_draw_rasterized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists_rasterized\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3063\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3064\u001b[0;31m         mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   3065\u001b[0m             renderer, self, artists, self.figure.suppressComposite)\n\u001b[1;32m   3066\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    970\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    971\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_sizes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 972\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    973\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    974\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    407\u001b[0m                 mpath.Path(offsets), offset_trf, tuple(facecolors[0]))\n\u001b[1;32m    408\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 409\u001b[0;31m             renderer.draw_path_collection(\n\u001b[0m\u001b[1;32m    410\u001b[0m                 \u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrozen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    411\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transforms\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moffsets\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moffset_trf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36mdraw_path_collection\u001b[0;34m(self, gc, master_transform, paths, all_transforms, offsets, offset_trans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)\u001b[0m\n\u001b[1;32m   2087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2088\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mcan_do_optimization\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mnot\u001b[0m \u001b[0mshould_do_optimization\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2089\u001b[0;31m             return RendererBase.draw_path_collection(\n\u001b[0m\u001b[1;32m   2090\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaster_transform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mall_transforms\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2091\u001b[0m                 \u001b[0moffsets\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moffset_trans\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfacecolors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mdraw_path_collection\u001b[0;34m(self, gc, master_transform, paths, all_transforms, offsets, offset_trans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)\u001b[0m\n\u001b[1;32m    264\u001b[0m                 \u001b[0mtransform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrozen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m                 \u001b[0mtransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranslate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 266\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrgbFace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    267\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    268\u001b[0m     def draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight,\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36mdraw_path\u001b[0;34m(self, gc, path, transform, rgbFace)\u001b[0m\n\u001b[1;32m   2039\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrgbFace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2040\u001b[0m         \u001b[0;31m# docstring inherited\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2041\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_gc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrgbFace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2042\u001b[0m         self.file.writePath(\n\u001b[1;32m   2043\u001b[0m             \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36mcheck_gc\u001b[0;34m(self, gc, fillcolor)\u001b[0m\n\u001b[1;32m   1998\u001b[0m         \u001b[0mdelta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelta\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1999\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdelta\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2000\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mdelta\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2001\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2002\u001b[0m         \u001b[0;31m# Restore gc to avoid unwanted side effects\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36moutput\u001b[0;34m(self, *data)\u001b[0m\n\u001b[1;32m    897\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    898\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 899\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_fill\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpdfRepr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    900\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    897\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    898\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 899\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_fill\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpdfRepr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    900\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    901\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_pdf.py\u001b[0m in \u001b[0;36mpdfRepr\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m    314\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloating\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 316\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Can only output finite numbers in PDF\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    317\u001b[0m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mb\"%.10f\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mb'.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Can only output finite numbers in PDF"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"IDNLATd6JFig"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EpPviw0hxue6","outputId":"97a9f999-8b60-4842-b7bb-17d3b0264b22","colab":{"base_uri":"https://localhost:8080/","height":513},"executionInfo":{"status":"ok","timestamp":1724918296949,"user_tz":-330,"elapsed":925,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'bioactivity_class', y = 'pIC50', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('pIC50 value', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_ic50.pdf')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"LPdV1vDnWBsh"},"source":["def mannwhitney(descriptor, verbose=False):\n","  # https://machinelearningmastery.com/nonparametric-statistical-significance-tests-in-python/\n","  from numpy.random import seed\n","  from numpy.random import randn\n","  from scipy.stats import mannwhitneyu\n","\n","# seed the random number generator\n","  seed(1)\n","\n","# actives and inactives\n","  selection = [descriptor, 'bioactivity_class']\n","  df = df_2class[selection]\n","  active = df[df.bioactivity_class == 'active']\n","  active = active[descriptor]\n","\n","  selection = [descriptor, 'bioactivity_class']\n","  df = df_2class[selection]\n","  inactive = df[df.bioactivity_class == 'inactive']\n","  inactive = inactive[descriptor]\n","\n","# compare samples\n","  stat, p = mannwhitneyu(active, inactive)\n","  #print('Statistics=%.3f, p=%.3f' % (stat, p))\n","\n","# interpret\n","  alpha = 0.05\n","  if p > alpha:\n","    interpretation = 'Same distribution (fail to reject H0)'\n","  else:\n","    interpretation = 'Different distribution (reject H0)'\n","\n","  results = pd.DataFrame({'Descriptor':descriptor,\n","                          'Statistics':stat,\n","                          'p':p,\n","                          'alpha':alpha,\n","                          'Interpretation':interpretation}, index=[0])\n","  filename = 'mannwhitneyu_' + descriptor + '.csv'\n","  results.to_csv(filename)\n","\n","  return results"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HZmUgOmdYVm5","outputId":"0108ff29-82a1-4335-979b-83153e299687","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1724918325948,"user_tz":-330,"elapsed":425,"user":{"displayName":"","userId":""}}},"source":["mannwhitney('pIC50')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Descriptor  Statistics    p  alpha                      Interpretation\n","0      pIC50   1310260.0  0.0   0.05  Different distribution (reject H0)"],"text/html":["\n","  <div id=\"df-71dcc04e-4fdd-49d8-9c7e-dc9e2a52c2a9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>pIC50</td>\n","      <td>1310260.0</td>\n","      <td>0.0</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71dcc04e-4fdd-49d8-9c7e-dc9e2a52c2a9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-71dcc04e-4fdd-49d8-9c7e-dc9e2a52c2a9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-71dcc04e-4fdd-49d8-9c7e-dc9e2a52c2a9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"mannwhitney('pIC50')\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Descriptor\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"pIC50\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Statistics\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1310260.0,\n        \"max\": 1310260.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1310260.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Different distribution (reject H0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":138}]},{"cell_type":"code","metadata":{"id":"ZNlEEsDEx3m6","outputId":"cf770a1f-9b2b-4cb9-f651-a418916e3a9d","colab":{"base_uri":"https://localhost:8080/","height":513},"executionInfo":{"status":"ok","timestamp":1724918342809,"user_tz":-330,"elapsed":920,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'bioactivity_class', y = 'MW', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('MW', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_MW.pdf')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"wRl2FvgHYqaG","outputId":"62781559-632f-4480-afca-a47987f666e6","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1724918354712,"user_tz":-330,"elapsed":597,"user":{"displayName":"","userId":""}}},"source":["mannwhitney('MW')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Descriptor  Statistics             p  alpha  \\\n","0         MW    767285.0  9.384663e-12   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-cd7b342f-9891-4a57-a6a1-6e94da278659\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>MW</td>\n","      <td>767285.0</td>\n","      <td>9.384663e-12</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd7b342f-9891-4a57-a6a1-6e94da278659')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cd7b342f-9891-4a57-a6a1-6e94da278659 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cd7b342f-9891-4a57-a6a1-6e94da278659');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"mannwhitney('MW')\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Descriptor\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"MW\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Statistics\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 767285.0,\n        \"max\": 767285.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          767285.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.384662846006202e-12,\n        \"max\": 9.384662846006202e-12,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.384662846006202e-12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Different distribution (reject H0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":140}]},{"cell_type":"code","metadata":{"id":"liEtkpI4yX9t","outputId":"0f8e2f15-a52a-45bd-91fe-d6a2fe2ff053","colab":{"base_uri":"https://localhost:8080/","height":513},"executionInfo":{"status":"ok","timestamp":1724918371295,"user_tz":-330,"elapsed":507,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'bioactivity_class', y = 'LogP', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('LogP', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_LogP.pdf')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"B61UsGMIFLuE","outputId":"dbf09d97-25ca-49ab-f9b5-5ca0746f4657","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1724918387114,"user_tz":-330,"elapsed":402,"user":{"displayName":"","userId":""}}},"source":["mannwhitney('LogP')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Descriptor  Statistics         p  alpha  \\\n","0       LogP    679320.0  0.141563   0.05   \n","\n","                          Interpretation  \n","0  Same distribution (fail to reject H0)  "],"text/html":["\n","  <div id=\"df-ffb97b56-26c5-4518-8f5c-82b2f8eef994\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LogP</td>\n","      <td>679320.0</td>\n","      <td>0.141563</td>\n","      <td>0.05</td>\n","      <td>Same distribution (fail to reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffb97b56-26c5-4518-8f5c-82b2f8eef994')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ffb97b56-26c5-4518-8f5c-82b2f8eef994 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ffb97b56-26c5-4518-8f5c-82b2f8eef994');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"mannwhitney('LogP')\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Descriptor\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LogP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Statistics\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 679320.0,\n        \"max\": 679320.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          679320.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.14156315358790794,\n        \"max\": 0.14156315358790794,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.14156315358790794\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Same distribution (fail to reject H0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":142}]},{"cell_type":"code","metadata":{"id":"iru1JPM1yg5A","outputId":"88080eb2-b0f8-49be-ff31-ab13a92e981b","colab":{"base_uri":"https://localhost:8080/","height":513},"executionInfo":{"status":"ok","timestamp":1724918398842,"user_tz":-330,"elapsed":524,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'bioactivity_class', y = 'NumHDonors', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('NumHDonors', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_NumHDonors.pdf')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"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miofHx+999578vPzc3VZcJDFlvNmj5vQpEkTYyKaxWIp+CAWi2JiYm72MA4LCQmRJEVHR7usBhRswYIFWrlypd09/larVd27d1d4eLgLKwPM6ZlnnlFaWlqe5d7e3lq6dKkLKkJhippTTnkiWu7Attlsxn9yfwbys2DBAkVFRcnHx0cjRozQokWLNGLECPn4+CgqKkoLFixwdYmAqeQO7Lp162rChAmqW7euJCktLU3PPPOMK8uDgxyePXajQCascSMZGRlauXKlfH19tWDBAuOySpcuXRQSEqLw8HCtWrVKYWFhDJUDRZCcnGwE9pIlS+Tj4yNJuvfee5WamqqwsDClpaUpOTmZoXKTcii0GW6GI9avX6/s7Gz169cvzzwIT09PhYWFafbs2Vq/fr26devmoioB8xg7dqykaz3snMDO4ePjozp16ujkyZMaO3as5s2b54oS4SCHQrtWrVrOqgOlUHx8vKRrvYD85ExezGkH4MZSU1MlSQMHDsx3fb9+/TR58mSjHczHaW/5On/+vLZt26a1a9dq27ZtOn/+vLN2jdtUYGCgJGnXrl35rt+9e7ddOwA3ltO7XrhwYb7rFy9ebNcO5uPwNe3Lly9r0qRJWrVqld292h4eHurevbtef/11lS9f3tHD4DYUGhqq+fPna/HixQoJCbEbIs/MzNSSJUvk4eGh0NBQF1YJmMd7772nAQMG6I8//jBu9cqRmpqqkydPGu1gTg6FdlZWlp5//nnt2bMnz6SzzMxMffXVVzp+/LgWLVokq5VXd8Oel5eXunfvrqioKIWHhyssLExt27bV7t27tWTJEqWkpKhnz55MQgOKyM/PT97e3kpLS1NYWJjq1Kmjfv36afHixUZge3t7MwnNxBy6T3v58uWaMGGCca92vgewWPTmm2+qd+/eN12ko7hP273ld5+2h4eHunXrxn3awE3gPm3zKWpOOdTTXr16tfFzaGiounfvrqpVq+rs2bNasWKFNmzYYLRzZWjDveX0snkiGuAcS5cu5YlotymHQvvw4cOyWCx64IEHNGPGDLt1nTp10vPPP6/t27fr8OHDDhWJ25+Xlxe3dQFO5Ofnx21dtyGHLjRfunRJktSyZct817dq1cquHQAAuHkOhXbFihUlSfv27ct3/d69e+3aAQCAm+fQ8HiTJk30/fffa8eOHRozZoy6detmXNNeuXKlduzYIYvFoiZNmjirXgAASi2HQrtr1676/vvvJUnr1q3TunXr8m335JNPOnIYAAAgB4fHe/bsqeDg4Dxv9Mp9+1dwcLB69OjhWJUAAMCx0LZarfr444/Vs2fPPA9PsVqtevrpp/XRRx/xYBUAAJzA4ceYli9fXu+8847Gjx+v/fv36/z586pcubLuvvtu+fr6OqFEAAAgOSG0c/j6+qpjx47O2h0AALiOQ6F99epVffPNN/r++++VmJgoSQoICND999+vRx99NM87kgEAwM276VT98ccfNX78+Hzfdbx8+XLVqlVL7733nvGAFQAA4JibmiH2008/afDgwYqPj8/3RSE2m02nTp3SwIEDtX//foeLBAAANxHaGRkZGjt2rDIyMoxluW/1yglxi8WiK1euaPTo0crMzHRexQAAlFLFDu2vv/5a8fHxslgskqSwsDCtXLlSP//8s/bt26eVK1cqLCzMaB8XF6evv/7aeRUDAFBKFTu0c7/r84033tCECRPUpEkTlS1bVuXKlVOTJk00YcIETZw40Wi3ceNG51QLAEApVuzQjo2NlSTdeeed6tu3b4Ht+vTpo0aNGslms+no0aM3XyEAAJB0E6F99uxZWSwWtW/fvtC2OW3Onj1b/MoAAICdYod2zruxq1atWmjbnDa8TxsAAMcVO7SvXr0qSUV6cIqHh4ckMXscAAAnKPbDVWw2mywWi9599129++67Rd4GAAA45qafiEYQAwBwa93UE9EIbAAAbr1i97R79OhREnUAAIBCFDu0J0+eXBJ1AACAQtzU8DgAALj1CG0AAEyi2MPjISEhxT6IxWLh+eMAADio2KEdFxcni8VSrBnkOW8EAwAAN89pw+MWi4VwBgCgBBW7p922bds8yxISEnTy5ElZLJZ81wMAAMcVO7Q//fTTPMvmz59vPNI0v/UAAMBxbj17/NKlS+rYsaMaN26sAwcOuLocAABc6qafPX4rzJkzR1lZWa4uA7fAhQsX9NZbb+nMmTOqVq2aJkyYoEqVKrm6LMC0zpw5o5dfflnp6ekqV66cZs6cqWrVqrm6LDjIbUM7NjZWn332mV599VW98cYbri4HJWjYsGGKj483Pp89e1bPPfecAgMD9dFHH7mwMsCcevToYfdK5EuXLmnw4MHy9PTUihUrXFgZHOW2w+OTJk1S37591aBBA1eXghKUO7DbtGmjqVOnqk2bNpKk+Ph4DRs2zJXlAaaTO7D9/Pw0atQo+fn5SZIyMzN5f4TJFbunPWDAgDzLEhISbrjeYrFo4cKFRT7Ghg0b9Ntvv2nmzJk6ePBgcUuESVy4cMEI7KVLl8rb21uSNHHiRKWlpemZZ55RfHy8Lly4wFA5UARnzpwxAnvhwoXy9/eXJHXu3FlJSUkaOHCgMjMzjctQMJ9ih/auXbvyvR87Z9nu3bvtlttstmLdv3358mVNmTJFo0aNUsWKFYu83Y2e1BYfH6/AwMAi7wu3xltvvSXpWg87J7BzeHt7q3Xr1tq7d6/eeust4+4EAAV7+eWXJV3rYecEdg5/f3/5+fkpOTlZL7/8sr744gtXlAgHud3w+Ny5c1WlShX16tXL1aWghJ05c0aS9Oyzz+a7vk+fPnbtANxYenq6JGnQoEH5rg8LC7NrB/Mpdk+7Zs2aJVGHpGuPSJ0/f75mz56tCxcuSJLS0tKM/7506ZIqVKiQ77bR0dEF7vdmnpeOkletWjWdPXtWn3/+uSZOnJhn/bJly4x2AApXrlw5Xbp0SZGRkercuXOe9UuWLDHawZyKHdqbNm0qiTokSadOndLVq1fznXw0YMAAtWzZ0vhDDvObMGGCnnvuOe3Zs0dpaWl2Q+RpaWnau3ev0Q5A4WbOnKnBgwcrOTlZSUlJdkPkSUlJSk5ONtrBnNzqlq+mTZtq0aJFdst+/fVXTZ48WRMnTlSLFi1cVBlKQqVKlRQYGKj4+Hg988wzat26tfr06aNly5YZgR0YGMgkNKCIqlWrJk9PT2VmZmrgwIHy8/NTWFiYlixZYgS2p6cno1cmZrEV53VdLvDDDz9owIAB+vLLL286tHOGx280hA7Xuf4+7Rzcpw3cnOvv087Bfdruq6g55XBP+9ixY1q0aJEOHDig1NRUZWdn52nD+7RxIx999BFPRAOcaMWKFTwR7TblUE/7xx9/1JAhQ5SRkSFJed6xnfPebYvFol9//dWxSh1ATxsA4M6KmlMO3fI1ffp0XblyRVLewC5oGQAAuDkODY8fPHhQFotFHh4e6tKli+rUqSNPT7ea2wYAwG3DoYT19vZWRkaG+vfvr1dffdVZNQEAgHw4NDz+0EMPyWazKSUlxUnlAACAgjjU0x47dqx++OEHrVy5UhUqVNBjjz2m6tWry8PDI0/bknySGgAApYFDoe3v768xY8Zo9OjRWrJkifGIvOtZLBbFxMQ4cigAAEo9h0J727ZtGjdunPEWL2aLAwBQchy6pv3BBx8oKytLEoENAEBJc6infeTIEVksFnl7e6tfv36qVauWypQp46zaAABALg5f046Pj1e/fv00atQoZ9UEAADy4dDwePfu3WWz2XTq1Cln1QMAAArgUE/7ySef1NatW7Vu3TpVqFBBTz31lAICAvJ9Khq3fAEA4BiHQjs0NNR4Kcjy5cu1fPnyfNtxyxcAAI5zyoPCueULAICS53BoE9QAANwaDoX2okWLnFUHAAAohEOhfe+99zqrDgAAUAiHbvkCAAC3jkM97VmzZhW57YgRIxw5FAAApZ7DoZ0zc7wwhDYAAI5xyi1f188gz7l3O/dnAADgGIdCO7+nnGVkZOjcuXOSroW1v7+/ypYt68hhAACAHAztTZs25bv84sWL+vDDD/Xxxx+rZs2aWrx4sSOHAQAAKqHZ4xUrVtSYMWPUqlUr/fLLL5o7d25JHAYAgFKlRG/5qlatmmw2m1avXl2ShwEAoFRwaHj8zz//zLPMZrMpPT1dP//8s7Zu3SpJSkxMdOQwAABADoZ2586dbzgzPGcGeY0aNRw5DAAAUAnd8iVdmzmeE+i9e/d2xmEAACjVSuwtXzabTRUqVNCAAQM0bNgwRw8DAECpVyJv+bJarapUqZIaNmyoMmXKOHIIAADwX7zlCwAAkyh2aBfnJSG58exx3Mg333yjDz74wPg8cuRIPfLIIy6sCDC3FStWaP78+cbnwYMHq0ePHi6sCM5gsRV0UboATZo0ualnif/666/F3sZZQkJCJEnR0dEuqwEFe/LJJwtcxz3+QPFxTplPUXOqRB6uYrPZ7P4DFOT6Py61a9e+4XoAN3b9OePv73/D9TCXm7qmXZQgzumNE9ooyDfffGP8HBERoQ4dOhifd+zYoSlTphjtGCoHCrdixQrj59GjR+uhhx4yPm/evFnTp0832jFUbk7FHh5PS0srcF12drb+85//aM6cOcabvmw2mwIDA7V582bHKnUAw+PuKfc3/vyG7ApbD8Ae55R5FTWnit3T9vb2znf5xo0b9a9//UtHjx6VdC2s/fz89MILL+i5554r7mFQilw/JJ6jRo0aSkhIuMXVAOZ3/ZB4jsqVK+v8+fO3uBo4k8MPV/nuu+80Y8YMHThwQNK1sK5YsaIGDRqk8PBwVahQweEicXs7depUvssJbODmJCUl5bucwDa/m56Itn//foWHh2vw4ME6cOCAbDabvLy8FB4ero0bN2rEiBEENm5o5MiRxs87duywW5f7c+52AAo2ePBg4+frL0nm/py7Hcyl2Ne0jxw5ovfff1+bNm2SdK1n7enpqV69emn48OGqXr16iRTqCK5pu6/rZ7LmNyTOtTeg6K4/p/IbEueccj9Fzalih3ZQUJDdrVzVqlXT0KFDVa9evRtu16lTp+IcxqkIbffGPaWAc3FOmU+JTUTLzs62e4PX2bNnNXny5BtuY7FYFBMTU9xDoZRYvXo1T0QDnGj16tU8Ee02VWKv5pSuhTX3aaMoHnnkEUIacKIePXoQ0rehEnu4SnHaAQCAwhU7tAt6HScAAChZxQ5tXscJAIBrlMgLQwAAgPMR2gAAmAShDQCASRDaAACYBKENAIBJENoAAJgEoQ0AgEkQ2gAAmAShDQCASRDaAACYBKENAIBJENoAAJgEoQ0AgEkQ2gAAmAShDQCASRDaAACYBKENAIBJENoAAJgEoQ0AgEkQ2gAAmAShDQCASRDaAACYBKENAIBJENoAAJgEoQ0AgEkQ2gAAmAShDQCASXi6uoDrrV+/Xv/5z3908OBBpaamql69eurfv7969eoli8Xi6vIAAHAZtwvtyMhI1apVSxEREfLz89POnTs1YcIEJSQkaMSIEa4uDwAAl3G70J47d678/f2Nz+3atVNKSooWLFig4cOHy2plRB8AUDq5XQLmDuwcTZs21cWLF5WWluaCigAAcA9u19POz08//aTq1aurYsWKBbYJCQkpcF18fLwCAwNLojRTSEhI0MWLF11dxm2nYsWKqlGjhqvLgItwXjkf51Th3D60f/zxR61bt06vvvqqq0sxpfPnz+uFF15Qdna2q0u57VitVi1atEiVK1d2dSm4xTivSgbnVOEsNpvN5uoiCpKQkKDevXvrjjvu0Pz582/6enZOLzw6OtqZ5ZmGWXoEJ0+e1PTp0zV69GjVqVPH1eUUil5B6WaG84pzyjyKmlNu29NOTU3V0KFD5evrq5kzZzIBzQFmOwnq1KmjO++809VlADdkpvOKc+r24ZahnZ6erhdeeEEXLlzQ0qVLValSJVeXBACAy7ldaGdmZuqVV17RsWPHtGTJElWvXt3VJQEA4BbcLrQnTpyozZs3KyIiQhcvXtS+ffuMdUFBQfLy8nJdcQAAuJDbhfaOHTskSVOmTMmzLjo6WrVr177VJQEA4BbcLrQ3bdrk6hIAAHBLTMkGAMAkCG0AAEyC0AYAwCQIbQAATILQBgDAJAhtAABMgtAGAMAkCG0AAEyC0AYAwCQIbQAATILQBgDAJAhtAABMgtAGAMAkCG0AAEyC0AYAwCQIbQAATILQBgDAJAhtAABMgtAGAMAkCG0AAEyC0AYAwCQIbQAATILQBgDAJAhtAABMgtAGAMAkCG0AAEyC0AYAwCQIbQAATILQBgDAJAhtAABMgtAGAMAkCG0AAEyC0AYAwCQIbQAATMLT1QWYWWJiolJTU11dxm3j5MmTdv8N5/Dx8VFAQICryygSzinn4pwqGa48pwjtm5SYmKi/vviirmZkuLqU28706dNdXcJtpYyXl/49d67bBzfnVMnhnHIuV55ThPZNSk1N1dWMDJWreb+sXj6uLgfIV3ZGqtL//F6pqaluH9qcUzADV59ThLaDrF4+8ijv7+oygNsG5xRQMCaiAQBgEoQ2AAAmQWgDAGAShDYAACZBaAMAYBKENgAAJkFoAwBgEoQ2AAAmQWgDAGAShDYAACZBaAMAYBKENgAAJkFoAwBgEoQ2AAAmQWgDAGAShDYAACZBaAMAYBKENgAAJkFoAwBgEoQ2AAAmQWgDAGAShDYAACZBaAMAYBKENgAAJkFoAwBgEoQ2AAAmQWgDAGAShDYAACZBaAMAYBKENgAAJkFoAwBgEoQ2AAAmQWgDAGAShDYAACbhlqEdGxur8PBwtWrVSh06dNC7776rjIwMV5cFAIBLebq6gOudP39eAwcOVP369TVz5kydPn1aU6ZMUXp6uv75z3+6ujwAAFzG7UL7iy++0KVLlzRr1iz5+vpKkrKysjRx4kS98MILql69umsLBADARdxuePzbb79Vu3btjMCWpNDQUGVnZ2vHjh2uKwwAABdzu9A+duyYGjZsaLfMx8dH1apV07Fjx1xUFQAArud2w+Opqany8fHJs7xy5co6f/58gduFhIQUuC4+Pl6BgYFOqe96mRfjlX0ltUT27SzZmemSLcvVZdx+LB6yepZzdRU3lH31kqtLKDYznFMS51WJ4JwqlNuFtln4+PjIarUq4+wBV5cC3JDVas33i7C74ZyCWbjynHK70Pbx8dGFCxfyLD9//rwqV65c4HbR0dEFrrtRL/xmBQQEaOrUqYqLi3P6vp0tJSVFV65ccXUZt52yZcvazb1wV7Vq1VJAQICryyiUmc4pifOqJHBOFc7tQrthw4Z5rl1fuHBBZ86cyXOt29Xuuusu3XXXXa4uA7htcE4BN+Z2E9E6duyonTt3KjX1/65pbdiwQVarVR06dHBhZQAAuJbbhXbfvn1VoUIFvfTSS9q+fbu++uorvfvuu+rbty/3aAMASjW3C+3KlStr4cKF8vDw0EsvvaRp06bp6aefVkREhKtLAwDApdzumrYk3XHHHYqMjHR1GQAAuBW362kDAID8EdoAAJgEoQ0AgEkQ2gAAmAShDQCASRDaAACYBKENAIBJENoAAJgEoQ0AgEkQ2gAAmAShDQCASbjls8edLTExUVlZWQoJCXF1KQAA5BEfHy8PD49C25WKnnbZsmXl6Vkqvp+YWnx8vOLj411dBnDb4JwyD09PT5UtW7bQdhabzWa7BfUAhcoZCYmOjnZxJcDtgXPq9lMqetoAANwOCG0AAEyC0AYAwCQIbQAATILQBgDAJAhtAABMglu+AAAwCXraAACYBKENAIBJENoAAJgEoQ0AgEkQ2gAAmAShjQJFRESoa9euLjl2ZGSktm7dmmd5586d9eabb7qgIsAcoqKitHr16jzL+/fvrxdeeMEFFcGZuOULBfrjjz+UlpamJk2a3PJjd+7cWQ8++KD++c9/2i2PiYmRj4+PateufctrAsygf//+8vb21ocffmi3/OjRo7JarWrYsKGLKoMz8JJpFKhu3bquLiGPoKAgV5cAmNKdd97p6hLgBAyPo0C5h8ejoqLUuHFjxcTE6Pnnn1erVq306KOPauXKlXbbbNmyReHh4WrXrp3atGmj3r1769tvv82z79OnT2v8+PFq37697r77bj322GNauHChpGu97Li4OC1ZskSNGzdW48aNFRUVZazLGR6PiopSUFCQzp49a7fvlJQUNW/eXF988YWxbO/evRowYIBatWqle+65R2PGjNG5c+ec9rsCnGHv3r3661//qgceeECtWrVSt27d8pxjqampeuutt9SxY0c1b95cnTt31rRp0yRd62Xv2rVLW7ZsMc6dmTNnGutyhsd/+OEHNW7cWAcOHLDbd1ZWljp06GDsT5JiY2P14osv6p577lGrVq00bNgw/fHHHyX4W8CN0NNGsYwdO1Z9+vRReHi4li1bpoiICLVo0UJ33HGHJOnUqVN66KGHNHjwYFmtVn377bcaNmyYFi5cqPvuu0+SlJycrGeeeUaSNGrUKNWuXVsnTpww/hDMmjVLw4YNU5s2bTR48GBJ+ff6H3nkEb3xxhvasGGD+vXrZyz/3//9X0nSY489JunaH8L+/furU6dOmjFjhi5fvqz3339fw4cP19KlS0voNwUU359//qk2bdro2WeflZeXl/bs2aN//OMfstls6tGjhzIyMjRw4EDFxcXppZde0l133aWEhAT99NNPkqQ33nhD48aNU7ly5fTqq69KkmrUqJHnOG3btlVAQIDWrVunFi1aGMu///57nT171viyfvLkSfXt21eNGjXSlClTZLFY9O9//1uDBg3Shg0b5OXldQt+K8iN0EaxhIWFKSwsTJLUunVrbd26VV9//bWGDx8uSXbhmZ2drfvuu09Hjx7VsmXLjNCOjIzUuXPntH79euPadLt27YztgoKC5OXlpapVq6pVq1YF1lKpUiV16tRJa9assTvumjVr1KFDB/n6+kqSpk2bpubNm2vWrFmyWCySpLvuuktdu3bV1q1b1alTJ8d/MYATPPHEE8bPNptNbdu21enTp7V06VL16NFDK1euVExMjL744gu1bt3aaNujRw9J14bAK1asKG9v7xueO1arVY8//rjWrVun8ePHG+fFmjVr1KhRIzVu3FjStS/QlStX1oIFC1S2bFlJUps2bRQSEqLly5cbfwtw6zA8jmJ54IEHjJ+9vb1Vs2ZNJSQkGMsSEhL06quv6i9/+YuCgoLUrFkzbd++Xb///rvR5rvvvtP999/vlMlkTzzxhPbt26c///xTkpSYmKjdu3cbf/wuX76sPXv26LHHHlNWVpYyMzOVmZmp+vXrKzAwMM/wIOBK58+f16RJk/TQQw+pWbNmatasmZYuXWqcP999953uuOMOu8C+WU888YRdLz0jI0MbN260++KwY8cOde7cWR4eHsa54+Pjo6CgIP3yyy8O14Dio6eNYqlUqZLd5zJlyigjI0PStZ71iy++qAsXLmjkyJGqV6+eypcvrw8++EDx8fHGNikpKWrUqJFT6nnooYdUvnx5rV27VkOHDtX69etVtmxZPfzww5KuXf/LysrS5MmTNXny5Dzb564LcLWIiAjt3btXL730ktFr/vzzz7V+/XpJ186dgIAApxzr7rvvVt26dbVmzRoFBwfr22+/VWpqqt1tnsnJyVq4cKEx3yS3MmXKOKUOFA+hDac5ceKEYmJiNHv2bCM0JSk9Pd2una+vrxITE51yzHLlyunhhx/WunXrNHToUK1bt04PPfSQvL29JV37kmGxWPTCCy/Y1ZTDz8/PKXUAjrpy5Yq2bNmiiIgI9e/f31j+2WefGT/7+vrq8OHDTjvmE088oaVLl+of//iH1q1bp5YtW6pOnTrG+sqVK6tTp0567rnn8mxboUIFp9WBoiO04TRXrlyRZP8NPC4uTnv37lX9+vWNZe3atdP8+fP1559/qmbNmvnuq0yZMsb+CtO1a1cNGzZM27Zt0759+zR06FBjXc61vWPHjtlNuAHcTUZGhrKzs+3On4sXL2rTpk3G5/bt22vdunX6+eef1bJly3z3U9xzZ+7cudq0aZM2bdqkUaNG2a1v166djhw5oqCgIHl4eNzEvwrORmjDaRo2bKgaNWpo2rRpys7OVlpamj744IM8w3mDBg3SqlWr1K9fP7344ouqU6eOTp48qePHj2vcuHHGvr7//nvt2LHDeJhKQb3i9u3by9fXV3//+9/l4+Ojjh072q0fP368Bg4cqFdeeUVPPPGEfHx8lJCQoJ07d6pnz57GBDnAlSpVqqQWLVro448/lr+/vzw9PfXRRx+pYsWKSkpKkiR169ZNn332mYYNG6YRI0aoUaNGOn36tH788Ue99dZbkq6dOytXrtSmTZtUrVo1BQQEqHr16vke884771Tjxo311ltv6cqVK3r88cft1o8cOVJPP/20hgwZoj59+qhq1ao6e/asdu3apeDgYJc9MbE0YyIanMbLy0szZ86Ul5eX/va3v+mDDz7Qiy++qHvvvdeunZ+fnz7//HO1adNG7733noYNG6b58+fb3ZoyevRo1ahRQy+//LKefvppbd68ucDjlilTRl26dFFiYqIeffTRPLehtGnTRp999pnS0tL02muvadiwYZozZ47KlSunevXqOfeXADhg2rRpqlu3riIiIjRp0iR16dJF3bt3N9Z7eXkpMjJSoaGh+vDDD/X8889r5syZ8vf3N9oMHTpUbdq00auvvqqnn35ay5Ytu+Exu3btqsTERN13332qVq2a3bp69epp+fLl8vX11cSJEzVkyBC9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DZGHh4fr5MmTOnjwoCSpTJkyeuqppwrd1++//66kpCTjc//+/e0CW5L8/PyKVFd6eromTpyolStXGtfc85Pzv5UkBQcHGz35iIgIffHFF2rQoIEaNGigNm3a6O677zaC+Y477pCvr69SUlIUGxurRx55REFBQapfv74aN26sdu3aqVatWkWqFaUPoY1S4/reXp06dTRr1ixJeYemC5L7OnbVqlXzrM+9LDU11fj5pZde0qFDhwqtMSMjw9g293Xs2rVrF7qto7p06aI333xTly5dUkJCgnbv3q309HQjDH19ffOd8OaIHj16aMaMGbp06ZJiY2ONa8Y5OnXqlCd885N79ENy7Pc1bdq0Ij0oJud/K0kaOHCgDh8+rDVr1igjI0O7du2yG+a+6667NG/ePAUEBKhs2bJ6//339fe//11//vmnTp48qZMnTxpty5QpozFjxtjNiQBy8EQ0lFq5r5NmZmbqwIEDhW5TuXJl4+ezZ8/mWZ97mY+Pj6RrM9NzB3bXrl317bff6tChQzp8+HC+E6N8fHzshkxPnTpVaG2OyrlmnmPNmjV2Q+NPPvmkvLy8nHrMihUr2n2R+vLLL2+qZ+/r62v32ZHfV+6h+bvuuktr1qzRwYMHdfjwYT322GP5buPp6al3331X27dv1+zZszV27Fj16tXL+P/Lb7/9pmnTphnt27Vrp+joaH355ZeaNGmShg4dquDgYEnXJrC9++67OnHixE3/G3D7IrRRal0f0rln/hYk94SupKQkbd261fh87tw5ffvtt3naXt8LfOyxx1S9enVZLBb98MMPdsO6OcqXL6+goCDj86pVq/L8EU9PT9e5c+eMz9dfr718+XKh/57r5b5+/PXXX2vjxo35riuK3PXcqJawsDDjC0pOQErXRi1yX364kQYNGth9+Vm8eHGe3+v58+d18eLFQveV+3+v++67T40aNZKnp6eSkpIKnCR27NgxXb58Wf7+/nr44Yc1dOhQvfPOOxo+fLjRJudyx5UrVxQbGyur1aoWLVqod+/eGjt2rBYvXmxM0svOzi7SyAxKH4bHUWps27ZNycnJysrKUmxsrNasWWOs8/DwUMuWLQvdR48ePTRnzhzjD/vIkSPVq1cvVaxYUWvWrFFaWpqka9drBw4cKEmqV6+erFarcX307bff1q+//qqUlJQbDsMOHTpUr7zyiqRrk866d+9uzB5PSEjQ5s2b9T//8z96+OGHJSnP0P6YMWPUunVrWa1WdevWLd/h/Ou1bt1aDRs21LFjx+zCq2nTpmratGmh2+dWvXp1xcXFSZIWLFiglJQUlStXTkFBQWrXrp3RrkGDBurQoYO2b99uN+T81FNPFWnimPR/dwBMnTpVkpSQkKDHH39coaGhqlKliuLi4rRx40YtWrSo0H9HgwYNjMlmy5cvl9VqVfny5bVq1ap8v2BJUmRkpP7zn//o/vvvV+3atVW1alWdP39eK1euNNrkBHJqaqrxxL0WLVooICBA5cqV008//aQLFy4Y7XNGaoDcCG2UGuvWrbObXZ3b8OHDVaNGjUL34ePjo1mzZmn48OFKTU1Venq6lixZYtfGarVq3LhxxszxKlWqqE+fPvriiy8kSfHx8Zo9e7aka8Okx44ds5vUlCM0NFSxsbHGfdppaWn68ssvC6ytdevWqlatms6cOSPp2m1U0dHRkq49IKYooS1dG5J+77337JYVt5ctSY888ogiIyMlXbvv+oMPPpB0rWedO7SlaxPHtm/f7tAxhwwZouPHjxu3fSUnJ+uzzz4rdt1//etfNXr0aEnXRjMWLlwo6dq9/B06dNCOHTvy3e7y5cvavHlzvuusVqsGDx5styzn3vH83H333Wrbtm2xa8ftj9BGqeTl5aVq1aqpefPm6t27t/7yl78Uedu2bdtqzZo1ioyM1LZt2+yeiHbPPfeof//+eXrtEyZMUEBAgL766islJiaqWrVqCg0N1ciRI+2uI19vxIgR6tixoz777DO7J6JVrVpVbdq0sXskqZeXlz7++GO999572rdvX5GGgvPTrVs3zZgxw7hcUKZMGXXt2rXY+xk1apSys7P1v//7vzpz5swNLz906tRJ9erVMy4BtGzZUnfeeWexjmexWDRp0iSFhobaPRGtTJkyql69uu69995CJxpK0hNPPCGr1ap///vfio2NVYUKFdS+fXuNGzfO+OJxvaefflo+Pj7at2+fTp06paSkJGVnZ6tq1apq2bKl+vfvb1yzrly5sv75z39qz549OnTokM6ePasLFy6ofPnyql+/vkJCQjRw4MAijzKgdLHYrn/UEgC4wJAhQ4ze9sSJE9W3b18XVwS4H77KAXCZ2NhYJSYmat++fcaws4+Pj5588kkXVwa4J0IbgMt8/PHHxotZcrzyyiuqUKGCiyoC3BuhDcDlvLy8VK9ePQ0cOFC9e/d2dTmA2+KaNgAAJsHDVQAAMAlCGwAAkyC0AQAwCUIbAACTILQBADAJQhsAAJMgtAEAMAlCGwAAkyC0AQAwif8PLJJoQAIA7AsAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"mS-rOqq7Fd1E","outputId":"a27f1b2c-51b0-4a14-8e47-3d61197ba16c","colab":{"base_uri":"https://localhost:8080/","height":80},"executionInfo":{"status":"ok","timestamp":1724918414540,"user_tz":-330,"elapsed":416,"user":{"displayName":"","userId":""}}},"source":["mannwhitney('NumHDonors')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Descriptor  Statistics             p  alpha  \\\n","0  NumHDonors    554898.0  1.517760e-12   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-1f432f1f-567d-4276-b8d0-f6c80bb87875\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NumHDonors</td>\n","      <td>554898.0</td>\n","      <td>1.517760e-12</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f432f1f-567d-4276-b8d0-f6c80bb87875')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1f432f1f-567d-4276-b8d0-f6c80bb87875 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1f432f1f-567d-4276-b8d0-f6c80bb87875');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"mannwhitney('NumHDonors')\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Descriptor\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"NumHDonors\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Statistics\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 554898.0,\n        \"max\": 554898.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          554898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.5177595587557635e-12,\n        \"max\": 1.5177595587557635e-12,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.5177595587557635e-12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Different distribution (reject H0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":144}]},{"cell_type":"code","metadata":{"id":"yCw6tgNCyxHf","outputId":"36e8b6f5-567c-4645-8249-a072bd8225c2","colab":{"base_uri":"https://localhost:8080/","height":513},"executionInfo":{"status":"ok","timestamp":1724918429119,"user_tz":-330,"elapsed":1614,"user":{"displayName":"","userId":""}}},"source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'bioactivity_class', y = 'NumHAcceptors', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('NumHAcceptors', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_NumHAcceptors.pdf')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"NEQoDZctFtGG","outputId":"3086b2e4-78b3-4d84-fed2-48d111b229d7","colab":{"base_uri":"https://localhost:8080/","height":98},"executionInfo":{"status":"ok","timestamp":1724918442751,"user_tz":-330,"elapsed":389,"user":{"displayName":"","userId":""}}},"source":["mannwhitney('NumHAcceptors')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Descriptor  Statistics             p  alpha  \\\n","0  NumHAcceptors    741150.0  9.808437e-08   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-e13f2245-6255-4aaa-a176-deb6af91bc12\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NumHAcceptors</td>\n","      <td>741150.0</td>\n","      <td>9.808437e-08</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e13f2245-6255-4aaa-a176-deb6af91bc12')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e13f2245-6255-4aaa-a176-deb6af91bc12 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e13f2245-6255-4aaa-a176-deb6af91bc12');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"mannwhitney('NumHAcceptors')\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Descriptor\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"NumHAcceptors\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Statistics\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 741150.0,\n        \"max\": 741150.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          741150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.808436743713653e-08,\n        \"max\": 9.808436743713653e-08,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.808436743713653e-08\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.05,\n        \"max\": 0.05,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Interpretation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Different distribution (reject H0)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":146}]},{"cell_type":"code","metadata":{"id":"GW1ZSsfJWqbM","outputId":"2d6d1716-2ef9-4972-ea40-ce3d28725e17","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724918454400,"user_tz":-330,"elapsed":399,"user":{"displayName":"","userId":""}}},"source":["! zip -r results.zip . -i *.csv *.pdf"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\tzip warning: name not matched: gdrive\n","  adding: plot_bioactivity_class.pdf (deflated 39%)\n","  adding: mannwhitneyu_NumHDonors.csv (deflated 11%)\n","  adding: plot_MW_vs_LogP.pdf (deflated 12%)\n","  adding: plot_ic50.pdf (deflated 35%)\n","  adding: mannwhitneyu_MW.csv (deflated 8%)\n","  adding: bioactivity_preprocessed_data.csv (deflated 82%)\n","  adding: bioactivity_data.csv (deflated 91%)\n","  adding: mannwhitneyu_pIC50.csv (deflated 9%)\n","  adding: plot_MW.pdf (deflated 37%)\n","  adding: mannwhitneyu_NumHAcceptors.csv (deflated 11%)\n","  adding: plot_LogP.pdf (deflated 38%)\n","  adding: plot_NumHAcceptors.pdf (deflated 38%)\n","  adding: plot_NumHDonors.pdf (deflated 38%)\n","  adding: mannwhitneyu_LogP.csv (deflated 8%)\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1724918517235}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}